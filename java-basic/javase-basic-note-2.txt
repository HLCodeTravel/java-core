javaSE总目录
目录（一）
Java01--概论和配置
Java02--运算符
Java03--位运算与三大语句
Java04--for语句和函数、数组
Java05--数组和查找算法
Java06--数组和面向对象
Java07--面向对象和关键字
Java08--面向对象继承和工具类、工厂模式
Java09--抽象类和接口
Java10--多态和内部类
**********************************************
目录（二）
Java11--异常和Object
**********************************************
目录（三）
Java12--包和多线程
Java13--多线程[空]
Java14--多线程[空]
目录（四）
Java15--String、StringBuffer和StingBuilder
Java16--j5和集合框架
Java17--集合
Java18--集合与泛型
Java19--集合与工具类
目录（五）
Java20--常用类和IO流
Java21--IO流
Java22--IO流
Java23--IO流
Java24--IO流
目录（六）
Java25--GUI[空]
Java26--网络上
Java27--网络下
Java28--反射和正则表达式




========================================================================================
========================================================================================

Java11--异常和Object

*异常，是在运行时期发生的不正常的情况
 在java中用类的形式对不正确情况进行了描述和封装对象。
 描述不正常的情况的类，就称为异常类。
 以前正常流程代码和问题处理代码相结合，
 现在将正常代码和问题代码分离，提高阅读性。
 其实异常就是java通过面向对象的思想将问题封装成对象，
 用异常类对其进行描述。
 不同的问题用不同的类进行具体的描述。比如角标越界，空指针等等。
*异常的体系
 问题很多，意味着描述的类也很多，将其共性进行向上抽取，形成了异常体系。
 最终问题（不正常情况）分成了两大类：
 Throwable（类似的有Runnable）可抛出
     |--1，一般不可处理的 Error
     |--2，可以处理的 Exception
 用return不合理，因为调用一个方法不是为了返回问题，
 所以用了另外一个关键字throw。
 throw object; 有一个前提，object所属的类必须具有可抛性
 Throwable：无论是Error还是Exception，问题发生就应该可抛出，让调用者知道并处理。
            该体系的特点就在于Throwable及其所有的子类都具有可抛性。
 可抛性到底是什么呢？怎么体现可抛性呢？
 其实是通过两个关键字体现的，throws/throw
 凡是可以被这两个关键字所操作的类和对象都具备可抛性。

*java.lang.NoClassDefFoundError//运行不存在的class
 java.lang.OutOfMemoryError//比如定义数组长度太大
 Error特点：是由jvm抛出的严重性问题。
      这种问题发生一般不针对性处理，直接修改程序。
       java.lang.OutOfMemoryError//比如定义数组长度太大
	   这个没有办法处理，应该直接修改程序
	   查看API文档
 Exception
 该体系的特点：子类的后缀名都是用其父类名作为后缀，阅读性很强。
 ArrayIndexOutOfBoundsException

 对于角标是整数不存在，可以用角标越界表示，
 对于负数为角标的情况，准备用负数角标异常来表示。
 负数角标这种异常在java中并没有定义过。
 那就按照java异常的创建思想，面向对象，将负数角标进行自定义描述。并封装成对象。
 这种自定义的问题描述成为自定义异常。

 注意：如果让一个类称为异常类，必须要继承异常体系，因为只有称为异常体系的子类才有资格具备可抛性。
	才可以被两个关键字所操作，throws throw

	异常的分类：
	1，编译时被检测异常:只要是Exception和其子类都是，除了特殊子类RuntimeException体系。
			这种问题一旦出现，希望在编译时就进行检测，让这种问题有对应的处理方式。
			这样的问题都可以针对性的处理。

	2，编译时不检测异常(运行时异常):就是Exception中的RuntimeException和其子类。
		这种问题的发生，无法让功能继续，运算无法进行，更多是因为调用者的原因导致的
		或者引发了内部状态的改变导致的。
		那么这种问题一般不处理，直接编译通过，在运行时，让调用者调用时的程序强制停止,让调用者对代码进行修正。

	所以自定义异常时，要么继承Exception。要么继承RuntimeException。
	class FuShuIndexException extends Exception
	{
		FuShuIndexException(){}
		FuShuIndexException(String msg)
		{
			super(msg);
		}
	}

	throws 和throw的区别：
	1，throws使用在函数上。
	   throw使用在函数内。
	2，throws抛出的是异常类，可以抛出多个，用逗号隔开。
	   throw抛出的是异常对象。

   编译，先检查语法格式，在检查异常和错误。
   处理异常的两种方式：
       1，抛出异常 throws Exception（在函数上声明出来）
	   2，捕捉异常
   但RuntimeException，运行时异常在不捕获的情况下，可以不用抛出异常，且这种异常特别常见，
   若遇见这种异常，程序将直接停止运行。

*捕捉异常
 异常处理的捕捉形式：
 这是可以对异常进行针对性处理的方式。
 具体格式是：
	try
	{
		//需要被检测异常的代码。
	}
	catch(异常类 变量)//该变量用于接收发生的异常对象
	{
		//处理异常的代码。
	}
	finally
	{
		//一定会被执行的代码。
	}

*异常处理的原则：
	1，函数内容如果抛出需要检测的异常（编译时异常），那么函数上必须要声明。
		否则必须在函数内用trycatch捕捉，否则编译失败。

	2，如果调用到了声明异常的函数，要么trycatch要么throws，否则编译失败。

	3，什么时候catch，什么时候throws 呢？
		功能内容可以解决，用try..catch。
		解决不了，用throws告诉调用者，由调用者解决 。

	4，一个功能如果抛出了多个异常，那么调用时，必须有对应多个catch进行针对性的处理。
		内部又几个需要检测的异常，就抛几个异常，抛出几个，就catch几个。
		比如感冒，发烧，咳嗽等等异常，做去医院的处理太笼统了，没有针对性，应该针对性处理
		吃感冒药，发烧药，咳嗽药。

		class FuShuIndexException extends Exception
		{
			FuShuIndexException(){}
			FuShuIndexException(String msg)
			{
				super(msg);
			}
		}

		class Demo
		{
			public int method(int[] arr,int index)//throws NullPointerException,FuShuIndexException
			{
				if(arr==null)
					throw new NullPointerException("没有任何数组实体");
				if(index<0)
					throw new FuShuIndexException("角标不能为负数！");
				return arr[index];
			}
		}

		class  ExceptionDemo4
		{
			public static void main(String[] args)
			{
				int[] arr = new int[3];
				Demo d = new Demo();
				try
				{
					int num = d.method(null,-1);
					System.out.println("num="+num);
				}
				catch(NullPointerException e)
				{
					System.out.println(e.toString());
				}
				catch (FuShuIndexException e)
				//FuShuIndexException e = new FuShuIndexException("角标不能为负数!");
				{
					System.out.println("message:"+e.getMessage());//
					System.out.println("string:"+e.toString());//此处 e 和 e.toString()等价

					e.printStackTrace();//jvm默认的异常处理机制就是调用异常对象的这个方法。

					System.out.println("负数角标异常!!!!");
				}
				/*
				catch(Exception e)//多catch父类的catch放在最下面。
				{
				}
				*/
				System.out.println("over");
			}
		}
        多catch时候，父类的catch放在最下面，否则编译失败。
		不过一般情况下，try几个异常处理几个异常，不会多捕捉catch异常

        class ExceptionDemo5
		{
			public static void main(String[] args)
			{
				Demo d = new Demo();
				try
				{

					int num = d.show(-1);
					System.out.println("num="+num);
				}
				catch (ArrayIndexOutOfBoundsException e)
				{
					System.out.println(e.toString());

		        //  return ;       //即使捕捉了异常，执行完finally内的代码之后再退出函数
		        //	System.exit(0);//退出jvm。finally内的代码不会被执行
				}
				finally//通常用于关闭(释放)资源。
				{
					System.out.println("finally");
				}

				System.out.println("over");

			}
		}
*try catch finally 代码块组合特点：3种组合，必须都有try
	1,  try catch finally
	2,	try catch(多个)当没有必要资源需要释放时，可以不用定义finally。
	3,	try finally 异常无法直接catch处理，但是资源需要关闭。

	void show()throws Exception
	{
		try
		{
			//开启资源。
			throw new Exception();
			//没有 catch，没有异常处理，此时是为了关闭资源
		}
		finally
		{
			//关闭资源。
		}
		/*
		catch(Exception e)
		{}
		*/
	}
*示例：
 /*毕老师用电脑上课。
   问题领域中涉及两个对象，毕老师，电脑。
   分析其中的问题，比如电脑蓝屏啦。冒烟啦。
 */
	class LanPingException extends Exception
	{
		LanPingException(String msg)
		{
			super(msg);
		}
	}

	class MaoYanException extends Exception
	{
		MaoYanException(String msg)
		{
			super(msg);
		}
	}

	class NoPlanException extends Exception
	{
		NoPlanException(String msg)
		{
			super(msg);
		}
	}

	class Computer
	{
		private int state = 2;
		public void run()throws LanPingException,MaoYanException
		{
			if(state==1)
				throw new LanPingException("电脑蓝屏啦！！");
			if(state==2)
				throw new MaoYanException("电脑冒烟啦！！");
			System.out.println("电脑运行");
		}
		public void reset()
		{
			state = 0;
			System.out.println("电脑重启");
		}
	}

	class Teacher
	{
		private String name;
		private Computer comp;
		Teacher(String name)
		{
			this.name = name;
			comp = new Computer();
		}
		public void prelect()throws NoPlanException
		{
			try
			{
				comp.run();
				System.out.println(name+"讲课");
			}
			catch (LanPingException e)
			{
				System.out.println(e.toString());
				comp.reset();
				prelect();//递归
			}
			catch (MaoYanException e)
			{
				System.out.println(e.toString());
				test();
				//可以对电脑进行维修。
	            //throw e;
				throw new NoPlanException("课时进度无法完成，原因："+e.getMessage());
			}

		}
		public void test()
		{
			System.out.println("大家练习");
		}
	}
	class ExceptionTest
	{
		public static void main(String[] args)
		{
			Teacher t  = new Teacher("毕老师");
			try
			{
				t.prelect();
			}
			catch (NoPlanException e)
			{
				System.out.println(e.toString()+"......");
				System.out.println("换人");
			}
		}
	}

	/*
	class NoAddException extends Exception
	{}
	void addData(Data d)throws NoAddException
	{
		连接数据库
		try
		{
		添加数据。出现异常 SQLException();
		}
		catch(SQLException e)
		{
			//处理代码。
			throw new NoAddException();
		}
		fianlly
		{
		关闭数据库。
		}
	}
	*/
*对于声明异常的方法进行覆盖的情况
		异常的注意事项：
		1，子类在覆盖父类方法时，父类的方法如果抛出了异常，
		那么子类的方法只能抛出父类的异常或者该异常的子类。
		2，如果父类抛出多个异常，那么子类只能抛出父类异常的子集。

		简单说：子类覆盖父类只能抛出父类的异常或者子类或者子集。
		注意：如果父类的方法没有抛出异常，那么子类覆盖时绝对不能抛，就只能try .

		interface  Inter
		{
			void function();
		}

		class D implements Inter
		{
			public void function()//throws Exception
			{}
		}
		class A extends Exception {}
		class B extends A{}
		class C extends Exception {}
		Exception
			|--A
				|--B
			|--C

		class Fu
		{
			void show()throws A{}
		}
		class Test
		{
			void method(Fu f)//Fu f  = new Zi();
			{
				try
				{
					f.show();
				}
				catch (A  a)
				{
				}
			}
		}

		class Zi extends Fu
		{
			void show()throws C{}
		}

		class
		{
			public static void main(String[] args)
			{
				Test t = new Test();
				t.show(new Zi());
			}
		}

*Object：所有类的根类。
 Object是不断抽取而来，具备着所有对象都具备的共性内容。
    /*
	一般都会覆盖此方法，根据对象的特有内容，建立判断对象是否相同的依据。
	*/
	public boolean equals(Object obj)//Object obj = p2;
	{
		if(!(obj instanceof Person))
		{
            //return false;
			throw new ClassCastException("类型错误");
		}
		Person p = (Person)obj;
		return this.age == p.age;
	}

    当此equals()方法被重写时，通常有必要重写 hashCode() 方法，以维护 hashCode方法的常规协定，
	该协定声明相等对象必须具有相等的哈希码。
    public int hashCode()
	{
	   return age;
	}

	public String toString()
	{
	  return "Person:" + age;
	}

*示例：
    class Person extends Object
	{
		private int age;
		Person(int age)
		{
			this.age = age;
		}
		/*
		//比较Person的年龄。是否是同龄人
		public boolean compare(Person p)
		{
			return this.age == p.age;
		}
		*/

		/*
		一般都会覆盖此方法，根据对象的特有内容，建立判断对象是否相同的依据。
		*/
		public boolean equals(Object obj)//Object obj = p2;
		{
			if(!(obj instanceof Person))
			{
	//			return false;
				throw new ClassCastException("类型错误");
			}
			Person p = (Person)obj;
			return this.age == p.age;
		}
	/*
		public int hashCode()
		{
			return age;
		}
	*/
		public String toString()
		{
			return "Person :"+age;
		}
	}
	class Demo{}

	class  ObjectDemo
	{
		public static void main(String[] args)
		{
			Person p1 = new Person(60);
			Person p2 = new Person(20);
			Demo d = new Demo();
	//		System.out.println(p1.equals(p2));

	//		System.out.println(p1);
	//		System.out.println(Integer.toHexString(p1.hashCode()));

	//		Class clazz1 = p1.getClass();
	//		Class clazz2 = p2.getClass();
	//		System.out.println(clazz1==clazz2);
	//		System.out.println(clazz1.getName());

			System.out.println(p1.toString());//Person@61de33
			//默认情况下的打印对象也就是调用对象的 toString()方法，方法体如下
			System.out.println(p1.getClass().getName()+"$"+Integer.toHexString(p1.hashCode()));
			//Person@61de33

	//		Person p3 = p1;

	//		Demo d = new Demo();
	//		System.out.println(p1==p2);
	//		System.out.println(p1.equals(p2));
		}
	}
*字节码文件Person.class在堆内存中，是唯一的
 Class clazz = person.getClass();



