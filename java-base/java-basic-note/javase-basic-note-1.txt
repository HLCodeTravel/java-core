javaSE总目录
**********************************************
目录（一）
Java01--概论和配置
Java02--运算符
Java03--位运算与三大语句
Java04--for语句和函数、数组
Java05--数组和查找算法
Java06--数组和面向对象
Java07--面向对象和关键字
Java08--面向对象继承和工具类、工厂模式
Java09--抽象类和接口
Java10--多态和内部类
**********************************************
目录（二）
Java11--异常和Object
目录（三）
Java12--包和多线程
Java13--多线程[空]
Java14--多线程[空]
目录（四）
Java15--String、StringBuffer和StingBuilder
Java16--j5和集合框架
Java17--集合
Java18--集合与泛型
Java19--集合与工具类
目录（五）
Java20--常用类和IO流
Java21--IO流
Java22--IO流
Java23--IO流
Java24--IO流
目录（六）
Java25--GUI[空]
Java26--网络上
Java27--网络下
Java28--反射和正则表达式

========================================================================================
========================================================================================

*软件：一系列按照特定顺序组织的计算机数据和指令的集合。
*人机
交互方式：图形化界面（Graphical User Interface GUI）
		   和命令行方式（Command Line Interface CLI）
		   如windows中，exe文件要么是图形化程序，要么是命令行程序
*JVM，java virtual machine,是java和操作系统之间的桥梁
 JRE，java runtime environment，java运行环境
 JDK，java developement kit，java开发工具
 JRE=JVM+类库
 JDK=JRE+java的开发工具

*windows中的dos命令行
 dir
 md
 rd：删除目录
 cd
 del：删除文件 del *.txt   del *.*   del *
 exit
 help 找出所有命令
 help 命令名  找出命令的使用方式
 命令行提示：help或者？
 	cd命令
	 e: 到达 e 盘根目录
	 cd java\jdk1.7
	 cd.. 返回至上一级目录
	 cd\  返回至磁盘根目录

*配置环境变量 PATH 加上bin路径；（环境变量分隔符）
*javac--编译java，这个命令会启动虚拟机的一系列编译程序，是java开发工具
 javac javaName.java
 java--运行字节码
 java className
 注释：若类用public修饰，则javaName和className必须一致

 java.lang.NoSuchMethodError

*可读性第一位，才能改正
*内存，大的临时的存储空间，速度比较快
*classpath，配置后可以在当前路径下执行另外目录里面的class文件
 set classpath=c:\myclass
*具体操作
 打开命令行界面
 e：（切换到java源文件所在磁盘）
 cd javacodes\day01 （切换到java源文件所在目录）
 javac javaName.java（编译java源文件）
 java className（执行java字节码文件）
==========================================================================================
==========================================================================================

Java02--运算符

*Java语言基础组成：关键字、标识符、注释、常量和变量、运算符、语句、函数、数组
*关键字：被Java语言赋予了特殊含义的单词，  特点：关键字中所有字母都为小写
*标识符命名规则 ：字母、数字、_和$，且数字不能开头，不能使用关键字
*注释：单行// 和多行注释 /*  */，文档注释/**  */ （java特有的）
 javadoc可以提取文档注释，生成一个程序说明书
 用处：注释说明（提高可读性），调试程序
 虚拟机不会把注释部分编译到字节码文件中
 ----开发和机试都必须写注释
*代码是思想的一种体现形式，思想最重要
 写出思想：
 在类上注释，多行注释
 /*
    需求：
	思路：1,2,3（宏观一些）
	步骤：1,2,3（结合思路，更具体一些）
 */
 在方法上注释：单行注释
 在语句后注释：单行注释

*常量：不能改变的数值
 常量分类：为了方便运算
	 整数常量
	 小数常量
	 布尔常量，仅有两个数值true，false
	 字符常量，将一个数字、字母或符号用单引号（‘’）标识
	 字符串常量，将一个或者多个字符用双引号（“”）标识
	 null常量，只有一个数值null

*进制：计数的方式，逢几进一
 二进制：
 八进制：以0开头
 十进制：
 十六进制：以0x开头，0-9，A-F
 byte字节=8个二进制位bit
 1kB=1024Byte  1MB=1024kB   1GB=1024MB  1TB=1024GB
 结论：八进制数，其实就是二进制位，3个二进制位组成一个八进制位。
	   十六进制：其实就是二进制中的4个二进制位组成一个十六机制位。
 负数的二进制：负数二进制的最高位是1
 原码：对应正数的最高为变为1就是负数的原码
 反码：负数的原码除最高位其余按位取反（或者说是负数对应的正数按位取反）
 补码：负数的反码加上1
 负数求补码：负数对应的正数的二进制取反，加1
 补码求负数：（最高位为1）减1，除最高位其余按位取反

*变量：在内存中划分的一块空间，用来存放同一种类型的数据
	   内存中的一个存储区域
       该区域有自己的名称（变量名）和类型（数据类型）
	   该区域的数据可以再同一类型范围内不断变化的数据
	   用来不断的存放同一类型的常量，并可以重复使用
	   用变量名来引用变量值
*数据类型：
     基本数据类型：整型[byte1/short2/int4/long8]、实型[float4/double8]、字符型[char2]、布尔型[boolean1]
	 引用数据类型：类[class]、接口[interface]、数组[[]]
	 其中整数默认int，小数默认double
	 int常用，byte也很常用，因为byte是最小的存储单元
*byte b = 3;
 short s = 4000;
 int x = 12;
 long l =123L;
 float f = 2.3f;
 double d = 3.4;
 char ch = '+';
 boolean bl = false;
 变量使用之前必须初始化
 变量有作用范围{}，作用域
*自动类型提升和强制类型转换
 变量存储区 int x = 3;
 运算区  x + 5，进行运算并返回，
 运算两端必须相同类型，但可以同时为数值类型，如byte和int类型，小的类型会做自动类型提升，变成同一类型
 byte b = 3;
 b = b + 4; //错误
 b = (byte)b + 4;//错误
 b = (byte)(b + 4);//强制类型转换，要慎重，取数据的低位部分，丢失数据精度
 ‘a’+1;
 (char)('a'+1);
 ASCII美国标准信息交换码，A--65，a--97，‘0’--48[48-57]
 国标码：gb2312（6,7K中文及字符），gbk（2W+,现在应用最广），gb18030
 ‘你’+1;
 unicode国际标准码，一般编码均兼容ASCII

 byte b = 4;//正确，why??? int数据可以赋值给byte类型变量
 b = 3 + 7;//正确，b = 10; 为常量，编译时会检查范围并进行自动类型转换
 byte b1 = 3;
 byte b2 = 7;//b2 = 127;
 b = b1 + b2;//错误，可能损失精度，因为b1和b2为变量，编译时无法进行检查范围
 int x = b1 + b2;//正确
 Integer.MAX_VALUE,Integer.MIN_VALUE
 x = Integer.MAX_VALUE + 2;//越界，保留低位的32位

*运算符：算术运算符、赋值运算符、比较运算符、逻辑运算符、位运算符、三元运算符
     运算符都有运算结果
 算术运算符：
	 %取余，模运算，值的符号与被模数值的符号相同
	  任何数模2,结果不是0就是1，可以用作开关
	 +加法或者连接符，如 3 + “2”，结果为32，任何数据与字符串用加号相加表示连接，结果为字符串
	  “5+5=”+5+5//结果为5+5=55
	  “5+5=”+(5+5)//5+5=10
	  int a = 4,b = 5;
	  System.out.println(a+","+b);//应用
	  System.out.println("a="+a+",b="+b);
	 ++、--自增自减，在左在右，先加减后运算，先运算后加减
 赋值运算符，=  +=  -=  *=  /=  %=
	 short s = 3;
	 s = s + 4;//错误，可能损失精度
	 s+=4;//正确，底层可以进行强制类型转换，相当于 s = (short)(s + 4);
 比较运算符，6个，运算结果一定是true或false
 逻辑运算符，用于连接两个Boolean类型的表达式
     &&,||,!   ！判断事物的另一面
	 &,|,^     ^有且仅有一个为真即为真
	 &&和&（双与和单与）的区别：左边为假时右边不参与运算
	 ||个|（双或和单或）的区别：左边为真时右边不参与运算
*****背是为了更好的理解，可以随时思考理解
==========================================================================================
==========================================================================================

Java03--位运算与三大语句

 位运算符：&,|,^,~[取反]
     移位，<<左移，>>右移，>>>无符号右移，操作关于2的倍数
     一个数异或同一个数两次，结果还是这个数，如6^3^3=6;可以加密解密
	 一个整数取反，加 1 ，结果为其相反数
	 左移，左移几位其实就是乘以2的几次方，可以完成2的次幂运算
	 右移，右移几位其实就是除以2的几次幂，**>>对于高位出现的空位用原来高位的数字来填补
	 无符号右移，***>>>数据无符号右移时，高位出现的空位直接用 0 来填补

*对两个整数变量的值进行互换，不需要第三方变量
	 a = a + b;
	 b = a - b;
	 a = a - b;
	 //但上面的方式不要使用，如果两个整数的数值过大，会超出int范围，会强制转换，数据会变化
	 //用异或运算交换两个整型变量的数值，面试时使用
	 int a = 3, b = 5;
	 a = a ^ b; // a = 3 ^ 5;
	 b = a ^ b; // b = (3^5)^5 = 3;
	 a = a ^ b; // a = (3^5)^3 = 5;

	 实际开发时，用第三方变量，阅读性比较好
	 int c;
	 c = a;
	 a = b;
	 b = c;

*三元运算符
  int a=1,b=2,max;
  max = (a > b)? a : b;

*if语句
 if
 if..else，当if..else运算后，有一个具体的结果时，可以简化写成三元运算符
 if..else if..else

*局部代码块{}，作用域，局部变量
 局部代码块可以定义局部变量的生命周期
*提高代码的复用性，一种思想，多条件合并
*switch语句
 switch(表达式值value)//byte,short,int,char,String,enum
 {
   case value1:
        执行语句;
		break;
   case value2:
        执行语句;
		break;
   ...
   default:
        执行语句;
		break;
 }
 从上往下匹配

*if和switch的应用：
 if:1,对具体的值进行判断
    2,对区间判断
    3,对运算运算结果是boolean类型的表达式进行判断
 switch:[使用麻烦，很少使用]
    1,对具体的值进行判断
    2,值的个数通常是固定的
    对于几个固定的值进行判断，建议使用switch语句，因为switch语句会将具体的答案都加载进内存，效率高一点
*循环结构
 while(条件表达式){...}
 do{...}while(条件表达式);
 无论循环条件是否为真，循环至少执行一次
 累加思想 sum=0;
 计数器思想count=0;
 for（初始化表达式;循环条件表达式;循环后的操作表达式）{执行语句;//循环体}
 while(true){}//最简单的无限循环形式
 for(;;){}//中间默认是true
 当对某些代码执行很多次时，使用循环结构
 当对一个条件进行一次判断时，可以使用if语句
 当对一个条件进行多次判断时，可以使用while语句

==========================================================================================
==========================================================================================

Java04--for语句和函数、数组

*for循环
	for嵌套，大圈套小圈思想
*转义字符
     \n：回车
	 \t：制表符
	 \b：退格
	 \r：按下回车键
	 windows系统中回车符其实是由两个符号组成的\r\n
	 linux中回车符是\n
	 System.out.println("\"hello world\"");//结果为"hello world"
	 字符中单纯的“\”后面的字符要被转义的
	 System.out.println("\\hello world\\");结果为\hello world\
*break和continue（跳出和继续）
 break使用范围：循环语句或者switch语句
      break跳出所在的当前循环，如果出现了循环嵌套，break想要跳出指定的循环，可以通过标记符号（标号）完成
	  outer:for()
	  {
	    inner:for()
		{
		  if()
		  {
			break outer;
		  }
		}
	  }
 continue使用范围：循环语句，结束本次循环，继续下次循环，同break一样，也可以使用标号

*函数：定义在类中的具有特定功能的一段小程序。
    权限修饰符，静态修饰符，返回值类型，
	方法命名要提高阅读性
	void函数没有返回值，函数末尾是return;

	好处：可以将功能代码进行封装，提高代码的复用性，

*java.lang.NoSuchMethodError
*函数的重载overload
 重载，在一个类中存在一个以上的同名函数，只要它们的参数个数、顺序，或者参数类型不同即可。
       也即是在一个类中有函数名相同且参数列表不相同的函数，这样的函数就构成了重载。
 重载，看函数名和参数，函数名相同且参数列表不同
 add(int a,int b)--add(double a,double b)
 函数的重载：（通过参数列表不同来区分函数名相同的函数）
  1，同一个类
  2，同函数名
  3，参数个数不同，or参数类型不同
  4，函数重载和返回值类型无关
  5，java是严谨性语言，如果出现函数调用的不确定性，会编译失败
*数组
 数组，同一种类型数据的集合，其实数组就是一个容器。
 好处，可以自动给数组的元素从0开始编号，方便操作这些元素。
 格式一，元素类型[] 数组名 = new 元素类型[元素个数或数组长度];   示例：int[] arr = new int[5];
         需要一个容器，但是不明确容器的具体数据。
 格式二，元素类型[] 数组名 = new 元素类型{元素1，元素2.....}；   示例：int[] arr = new int[]{1,2,3};
         需要一个容器，存储已知的具体数据。
*内存的划分：
 1，寄存器，与cpu相关
 2，本地方法区，与所在系统相关
 3，方法区，后面讲
 4，栈内存，存储的都是局部变量，而且变量所属的作用域一旦结束，该变量就自动释放
			局部代码块，限定局部变量的生命周期
			局部变量在函数中，函数在栈中
 5，堆内存，存储的是数组和对象，其实数组就是对象，凡是new建立都在堆中
			int[] arr = new int[3];
			Main在栈中，arr
			int[3]三个元素在堆中，有一个首地址，用来赋值给栈中的arr，而且堆对其中的变量会进行默认初始化
            特点：
			    1，每一个实体都有首地址值
				2，对内存中的每一个变量都有默认初始化值，
				   根据类型的不同而不同，整数是0，小数0.0或者0.0f，boolean false,char '\u0000'
				3，java对堆中不被引用的对象有自动的垃圾回收机制（垃圾回收机制）
			引用数据类型，有引用关系或者指向关系，null可以解除引用，引用数据类型变量与实体对象之间的引用
*ArrayIndexOutOfBoundsException数组越界异常，当访问数组中不存在的角标时，就会发生该异常
 NullPointerException，当引用型变量没有指向任何实体时，还在用其操作实体，就会发生该异常
*int[] arr= new int[3];
 System.out.println(arr);//结果为[I@c17164，分析@之前表示实体对象类型为int类型的数组，之后为哈希地址

==========================================================================================
==========================================================================================

Java05--数组和查找算法

*数组初始化
 int[] arr = new int[]{1,2,3};//不要写长度，用new来初始化数组，常规方式
 int[] arr = {1,2,3};//数组静态初始化方式，重新赋值和传参时和上面方式有差别
 容器特别重要，一定要重点学习

*遍历数组
     对数组最基本操作：存和取。
	 核心思想：就是对角标的操作。
	 数组的一个重要属性，长度arrName.length

	//打印数组
	public static void printArray(int[] arr)
	{
	   print("[");
	   for(int i = 0; i < arr.length; i++)
	   {
		  if(i != arr.length - 1)
			  print(arr[i] + ", ");
		  else
			  println(arr[i] + "]");
	   }
	}

	//不换行打印字符串
	public static void print(String s)
	{
	  System.out.print(s);
	}

	//换行打印字符串
	public static void println(String s)
	{
	  System.out.println(s);
	}

*最值max,min
 思想是一致的
 public int getMax(int[] arr)
 {
   int maxValue = arr[0];
   for(int i = 1; i < arr.length; i++)
   {
      if(arr[i] > maxValue)
	  {
	     maxValue = arr[i];
	  }
   }
   return maxValue;
 }
*排序
 冒泡，简单选择，插入，快速排序
 选择排序selectSort
 冒泡排序bubbleSort
 	//选择排序
	public static int[] selectSort(int[] arr)
	{
	   int min,index;
	   for(int i = 0; i < arr.length; i++)
	   {
			index = i;
			min = arr[i];
			for(int j = i+1; j < arr.length; j++)
		    {
			   if(arr[j] < min)
			   {
			      min = arr[j];
				  index = j;
			   }
			}
            if(i != index)
		    {
			  swap(arr,i,index);
			}

	   }
	   return arr;
	}

	//交换数组中下标分别为x，y的两个元素的位置
	public static void swap(int[] arr,int x, int y)
	{
	  int temp = arr[x];
	  arr[x] = arr[y];
	  arr[y] = temp;
	}
 }

  //冒泡排序
	public static int[] bubbleSort(int[] arr)
	{
	  for(int i = 0; i < arr.length; i++)
	  {
	    for(int j = 0; j < arr.length-i-1; j++)//一定要注意此处的判断条件
		{
		  if(arr[j] > arr[j+1])
		  {
		    swap(arr,j,j+1);
		  }
		}
	  }
	  return arr;
	}

*Arrays工具类
*查找 int getIndex(int[] arr, int key)
 顺序查找和折半查找
 顺序查找：循环遍历
 折半查找：前提数组必须有序
    int halfSearch(int[] arr, int key)
	//折半查找
 	public static int halfSearch(int[] arr, int key)
	{
	   int min, max, mid;
	   min = 0;
	   max = arr.length;
	   while(min <= max)
	   {
     	   mid = (min + max)/2;
		   if(arr[mid] == key)
		     return mid;
		   else if(arr[mid] > key)
		     max = mid - 1;
		   else if(arr[mid] < key)
		     min = mid + 1;
	   }
	   return -1;
	}

	Arrays.binarySearch(arr,key);//如果存在则返回具体的角标位置，不存在则返回的是 -插入点-1
	//-1为了防止插入点为0时，无法区分该值是否存在
*什么时候使用数组？
     如果数据出现了对应关系，而且对应的一方是有序的数字编号，并作为角标使用，这时就必须要想到使用数组。
     就可以将这些数据存储到数组中。根据运算的结果作为角标直接去查数组中对应的元素即可。
	 这种方式称为，查表法。
	 把数组当成映射关系表

*进制转换----查表法
  public static void toHex(int num)
	{
		if(num==0)
		{
			System.out.println("0");
			return ;
		}
		//定义一个对应关系表。
		char[] chs = {  '0','1','2','3',
						'4','5','6','7',
						'8','9','A','B',
						'C','D','E','F'};
		/*
		一会查表会查到比较的数据。
		数据一多，就先存储起来，在进行操作。
		所以定义一个数组。 临时容器。
		*/
		char[] arr = new char[8];
		int pos = arr.length;

		while(num!=0)
		{
			int temp = num&15;
			arr[--pos] = chs[temp];
			num  = num >>> 4;
		}

		System.out.println("pos="+pos);
		for(int x=pos ;x<arr.length; x++)
		{
			System.out.print(arr[x]);
		}
	}

*进制转换总结
   //十进制-->十六进制。
	public static void toHex(int num)
	{
		trans(num,15,4);
	}
	//十进制-->二进制。
	public static void toBinary(int num)
	{
		trans(num,1,1);
	}
	//十进制-->八进制。
	public static void toOctal(int num)
	{
		trans(num,7,3);
	}

	public static void trans(int num,int base,int offset)
	{

		if(num==0)
		{
			System.out.println("0");
			return ;
		}
		//定义一个对应关系表。
		char[] chs = {'0','1','2','3',
						'4','5','6','7',
						'8','9','A','B',
						'C','D','E','F'};
		/*
		一会查表会查到比较的数据。
		数据一多，就先存储起来，在进行操作。
		所以定义一个数组。 临时容器。
		*/
		char[] arr = new char[32];
		int pos = arr.length;

		while(num!=0)
		{
			int temp = num & base;
			arr[--pos] = chs[temp];
			num  = num >>> offset;
		}

		for(int x=pos ;x<arr.length; x++)
		{
			System.out.print(arr[x]);
		}
		System.out.println();
	}
}

*Integer.toBinaryString(-6);
==========================================================================================
==========================================================================================

Java06--数组和面向对象
*二维数组
 概念，
 格式一，int[][] arr = new int[3][2];
 格式二，int[][] arr = new int[3][];
          arr[0] = new int[2];
		  arr[1] = new int[1];
		  arr[2] = new int[3];
         分别对二维数组中的每一个一维数组进行初始化
		 必须对arr[0,1,2]三者进行初始化，否者不能使用二维数组的元素，会有NullPointerException
 格式三，int[][] arr = {{2,2},{3,3,3},{5,5,5,5,5}};
 内存分析，int[][] arr = new int[3][2];
  数组变量arr在栈内存中，指向arr[0]
  arr[0],arr[1],arr[2]连续的分布在堆内存中，三者默认值均为null，用来存放一维数组的地址
  待一维数组分配完毕后，其元素默认值为0，再把一维数组地址赋值给一维的数组变量arr[0,1,2]
  堆中引用类型变量的默认值为null
 System.out.println(arr);// [[I@17164，@左边是实体类型，右边是哈希值
*遍历二维数组
 for(int i = 0; i < arr.length; i++)
 {
   for(int j = 0; j < arr[i].length; j++)
   {
     System.out.print(arr[i][j] + ", ");
   }
 }

*面向对象（实体）
 思想：面向过程和面向对象
 面向过程：把大象装进冰箱，打开、存储、关闭冰箱
     对于面向过程思想，强调的是过程（动作）。
 面向对象：
     对于面向对象思想，强调的是对象（实体）。
     冰箱打开，冰箱存储，冰箱关闭
 特点：1，面向对象是一种常见的思想，符合人们的思考习惯
       2，面向对象的出现，将复杂的问题简单化
	   3，面向对象的出现，让曾经在过程中的执行者，变成了对象的指挥者

*类与对象
  类：事物的描述，通常关注属性和行为。
  对象：该类事物的实例。
 定义类其实就是在定义类中的成员。
 成员：成员变量==属性，成员函数==行为
 成员变量是全局变量，代码块中的变量是局部变量
 局部变量和成员变量的区别：
     1，成员变量定义在类中，整个类中都可以访问
	    局部变量定义在函数，语句，局部代码块中，只有在所属的区域有效。
	 2，成员变量存在于堆内存的对象中，有默认初始化值
	    局部变量存在于栈内存的方法中，没有默认初始值
		局部变量必须自己初始化后才能使用。
	 3，成员变量随着对象的创建而存在，随着对象的消失而消失。
	    局部变量随着所属区域的执行而存在，随着所属区域的结束而释放。

*对象的内存分配
 对象各个成员变量在堆内存中划分一部分存储空间，并给各个变量初始化，
 返回这块内存的首地址给类引用变量
*匿名对象，没有名字的对象。如 new Person();其实就是定义对象的简写格式
     1，当对象对方法仅进行一次调用的时候，就可以简写成匿名对象 new Person().speak();
     2，匿名对象可以作为实际参数进行传递。
*封装 encapsulation
     是指隐藏对象的属性和实现细节，仅对外提供公共访问的方式。
 好处：
     1，将变化隔离
	 2，便于使用
	 3，提高重用性
	 4，提高安全性
 封装原则：
     将不需要对外提高的内容都隐藏起来。
	 把属性都隐藏，提供公共方法对其访问。
 把对象属性私有化，封装隐藏起来，对外提供公共的方法进行访问，实现对属性的可控性
 形象比喻，计算机主机机箱封闭起来，隐藏细节，对外提供一个开机\关机按钮。
*private :私有，是一个权限修饰符，用于修饰成员，私有的内容只在本类中有效
 注意：私有仅仅是封装的一种体现而已

==========================================================================================
==========================================================================================

Java07--面向对象和关键字

*构造函数：构建创造对象时调用的函数。
   特点：1，函数名和类名相同
         2，不用定义返回值类型  void Person(){}//是一般函数，不是构造函数
		                        但构造函数和返回值为void的函数末尾都有return;语句
								return是结束函数的标志
		 3，没有具体的返回值
   作用：给对象进行初始化
   注意：1，默认构造函数的特点，空参数
		 2，多个构造函数是以重载的形式存在的。

  如果一个类中没有定义多构造函数，那么该类中会有一个默认的空参数的构造函数 Person(){}
  如果在类中定义了指定的构造函数，那么类中的默认构造函数就没有了
  什么时候定义构造函数呢？
      在描述事物时，该事物已存在就具备的一些内容，这些内容都定义在构造函数中。
	  构造函数可以有多个，用于对不同的对象进行针对性的初始化
	  多个构造函数在类中是以重载的形式来体现的
  构造函数和一般函数的区别：
      1，构造函数，对象创建时，就会调用与之对应的构造函数，对对象进行初始化
	     一般函数，对象创建后，需要函数功能时才调用
	  2，构造函数，对象创建时，会调用只调用一次
	     一般函数，对象创建后，可以被调用多次
*this关键字
 局部变量和成员变量同名时，有冲突，用关键字this来区分。
 this：代表当前对象，是对当前对象的引用
       this就是所在函数所属对象的引用。
	   简单说：哪个对象调用了this所在的函数，this就代表哪个对象
       Person(String name,int age)
	   {
	      this.name = name;
		  this.age = age;
	   }

 内存分析：
 main进栈，构造函数Person(String name,int age)进栈，
 创建对象，把局部变量的值赋值给成员变量，构造函数出栈...
*this应用
 一个类中的所有成员想要被执行，必须经过对象调用，除了静态成员
 一般一个类中的函数的调用都省去了关键字 this
 但对于构造函数之间的调用有特别之处，比如
 Person(String name)
 { this.name = name }
 Person(String name, int age)
 {
    this(name);//此处调用了上面的构造函数
	//Person(name);相当于this.Person(name)是错误的调用方式，因为此时对象还不存在，不能够被引用
	this.age = age;
 }
 this也可以用于在构造函数中调用其他构造函数
 注意：只能定义在构造函数的第一行，因为初始化动作要先执行，免得覆盖掉后来想要的赋值，如
 Person(String name, int age)
 {
    this("xiaozhou");
	this.name = name;
	this.age = age;
	//this("xiaozhou");
	//错误，会覆盖掉原本想要的值，java强制要求this构造函数放在第一行，这是规定，否则编译失败
 }
 本类中用到了本类的对象一般都用this代表，如判断是否同龄人
 public boolean compareAge(Person p)
 {
    return this.age == p.age;//谁调用这个函数，this就代表谁（对象），可省略为age == p.age;
	//return this.getAge() == p.getAge();
 }
*static静态关键字，是修饰符
 为什么有？比如有一群人，他们都属于同一个国家country=“CN”，那么不用在每个对象中都开辟一份存储空间，
 让他们共享一个区域来节省空间，此时把这个成员变量设置为static类型，属于这个类，让所有实例对象来共享。
 该静态成员变量在对象之前出现，那么没有对象也是可以被调用，可以被类名调用，如Person.country，
 当然也可以用对象来调用，p.country
 static的特点：1，static是一个修饰符，用于修士成员
			   2，static修饰的成员被所有的对象共享。
			   3，static优先对象那个存在，因为static的成员随着类的加载就已经存在了
			   4，static修饰的成员多了一种调用方式，就可以直接被类名所调用，类名.静态成员
			   5，static修饰的数据是共享数据，对象中的存储的是特有数据

 成员变量（实例变量）
 静态变量（类变量）
 局部变量
 成员变量和静态变量的区别：
     1，两种变量的生命周期不同
	    成员变量随着对象的创建而存在，随着对象的被回收而释放
		静态变量随着类的加载而存在，随着类的消失而消失
	 2，调用方式不同
        成员变量只能被对象调用
		静态变量可以被对象调用，还可被类名调用，推荐使用后者
	 3，别名不同
	    成员变量也称为实例变量
		静态变量称为类变量
	 4，数据存放的位置不同
		成员变量数据存储在堆内存的对象中，所以也叫对象的特有数据
		静态变量数据存储在方法区[Java04--]（共享数据区）的静态区，所以也叫对象的共享数据
        堆里面存放的都是实体
*静态使用的注意事项：
     1，静态方式只能访问静态成员，（非静态既可以访问静态，又可以访问非静态）
	 2，静态方法中不可以使用this或者super关键字（因为用类名调用时对象还不存在，解释1,2）
	 3，主函数是静态的
	 （意味着主函数不是通过对象调用，而直接调用的函数必须是静态的，且涉及到的变量必须也得是静态的）
	 在本类中使用静态变量，省略的前缀是类名，而不是this
	 static String country = "CN";
	 String name = "xiaozhou";
	 static void show()
	 {
	   System.out.println(country + ", " + name);//相当于Person.country,this.name，
	   //使用this.country也可以
	 }
*main函数，程序的入口，来调用其他程序，可以保证程序的独立运行
 主函数特殊之处：1，格式是固定的
				 2，被jvm所识别和调用
  public static void main(String[] args){}
  public ：以为权限必须是最大的
  static ：不需要对象的，直接用主函数所属类名调用即可
  void ：主函数没有具体的返回值  （虚拟机不需要返回值）
  main ：函数名，不是关键字，只是一个jvm识别的固定的名字
  String[] args ：这是主函数的参数列表，是一个数组类型的参数，而且元素都是字符串类型
  public static void main(String[] args)
  {
    System.out.println(args);//[Ljava.lang.String;@c17164
	System.out.println(args.length);//0,传递的实参是 new String[0]
	//字符串类型可以转换为其他类型
  }
  给主函数传递参数的格式：java ClassName value1 value2 value3 ...
  主函数中唯一可以变化的是 参数名 args，一般不做改变
  public static void main(int x){}是对主函数的重载
*static内存分析
 本地区，寄存器区
 方法区，存放方法
 栈内存，存放局部变量，[函数名show()]
 堆内存，存放实例对象
*静态什么时候用？
 1，静态变量
        当分析对象中所具备的成员变量的值都是相同的，这是这个成员变量可被静态修饰。
		只要数据在对象中都是不同的，就是对象的特有数据，必须存储在对象中，是非静态的
		如果是相同的数据，对象不需要做修改，只需要使用即可，不需要存储在对象中定义成静态的
 2，静态函数
		函数是否用静态修饰，就参考一点，就是该函数功能是否有访问到对象中的特有数据
		简单点说，从源代码看，该功能是否需要访问非静态的成员变量，如果需要，该功能定义为非静态的，
		如果不需要，就可以将该功能定义为静态的。
		但是非静态需要被对象调用，而仅创建对象调用非静态的
  静态方法只能访问静态成员，（非静态既可以访问静态，又可以访问非静态）

*静态代码块格式
   static{
     //....
   }
 静态代码块随着类的加载而执行，而且只执行一次
 作用：用于给类进行初始化
       区别于构造方法，初始化对象；
	   比如一个类中的成员均为静态的，此时不需要创建对象，所以需要用静态代码块来初始化类
	   static int num;
	   static{
	      //可以对num进行初始化并操作
	   }
 使用较少，可在JDBC连接处使用
*构造代码块格式，在类中{}
    可以给所有对象进行初始化，当创建一个对象时候就执行该代码块，创建几个对象就执行几次
 构造方法除了初始化，也可以进行其他的操作，但一般构造方式仅进行给对象初始化
 构造函数是给对应的对象进行针对性的初始化
 构造代码块和构造方法的区别
 构造代码块是对所有的对象进行通用性的初始化
 构造函数是针对性的对对象进行初始化

 *局部代码块格式，在函数中{}
      作用：为了限制局部变量的生命周期

 执行顺序：静态代码块，构造代码块，构造函数

==========================================================================================
==========================================================================================

Java08--面向对象继承和工具类、工厂模式

*一个操作：
     ArrayToolDemo.java中使用ArrayTool.java中的方法，则需要先编译后者，再编译前者，才能够执行
	 实际上，如果两个类在同一个路径下，可以直接编译ArrayToolDemo.java，
	 编译器会自动在当前路径下找到使用到的类并编译
	 也可以javac *.java，把同一个目录里面的所有的java源文件全部编译，后执行
*工具类中的方法都是静态的，所以该类是不需要创建对象，
 为了保证不让创建该类对象，可以将构造函数私有化
*javadoc命令来提取注释文档，/**   */
             只提取public和protected两种权限的文档注释
 源代码中@param age 年龄
 javadoc  //查询javadoc用法
 javadoc -d . -author -verson ArrayTool.java
 javadoc -d myhelp -author -verson ArrayTool.java

 需要同时使用多个路径下的文件，需要设置classpath
 set classpath = ,;%classpath% 来设置临时的classpath
*设计模式：
     对问题行之有效的解决方式，其实它是一种思想。
 单例模式：（23中设计模式）
     解决的问题，就是可以保证一个类中在内存中的对象唯一性。
     步骤：1，私有化该类构造方法
	       2，通过new在本类中创建一个本类对象，赋值给一个静态的私有的该类引用类型变量
		   3，定义一个公有的静态的方法，将创建的对象返回
     //恶汉式单例模式
     class Single
	 {
	    private static Single s = new Single();
		private Single(){}
		public static Single getInstance()
		{
		   return s;
		}
	 }
	 //懒汉式单例模式
	 class Single
	 {
	    private static Single s = null;
		private Single(){}
		public static Single getInstance()
		{
		  if(s == null)
		     s = new Single();
		  return s;
		}
	 }
     比较：恶汉式，类已加载，对象就已经存在了。
	       懒汉式，类加载进行，没有对象，只有调用了getInstance方法时，才创建对象
		           延迟加载形式，但存在线程安全问题，可能无法保证对象的唯一性
     考察懒汉式比较多，实际应用时用恶汉式

*继承：
     好处：1，提高了代码的复用性
		   2，让类与类之间产生了关系，给第三个特征多态提供了前提
		      （没继承就没有多态）

     java中支持单继承，不直接支持多继承，但对C++中的多继承机制进行改良
	 单继承：一个子类只能有一个直接父类
	 多继承：一个子类可以有多个直接父类（java中不允许，进行改良）
	        比如多个类中均含有同样的方法，此时多继承后会产生调用的不确定性。
			不直接支持，因为多个父类中有相同的成员，会产生调用不确定性。
			在java中是通过“多实现”的方式来体现。
	 java支持多层（多重）继承，如 A<--B<--C，就会出现继承体系
     class A{}
	 class B extends A{}
	 class C extends B{}
     当要使用一个继承体系时，
	 1，查看该体系中的顶层类，了解该体系的基本功能
	 2，创建体系中的最子类对象，完成功能的使用。
 什么时候定义继承？
 当类与类之间存在着所属关系的时候，就定义继承，xxx是yyy中的一种。xxx extends yyy
 所属关系：is a 关系
 在子父类中，成员的特点体现
     1，成员变量
	        当子父类中的成员变量同名用super区分父类
	        当本类的成员和局部变量同名用this区分
			this和super用法很相似。
			this：代表一个本类对象的引用
			super：代表一个父类空间。（可能没有创建父类对象）
			子类要访问父类中的成员变量，如果是私有的，必须要用父类中提供的public，protected的方法来访问
	 2，成员函数
			当子父类中出现成员函数一模一样的情况，会运行子类的函数，这种现象称为覆盖操作。
			这是函数在子父类中的特性。
			函数两个特性：1，重载 overload。同一个类中
						  2，覆盖 override，覆盖也称为重写，覆写。在子类中
			覆盖注意事项：（覆盖方法和被覆盖方法）
			    1，子类方法覆盖父类方法时，子类权限必须大于等于父类的权限。 （覆盖权限）
				2，静态只能覆盖静态，或被静态覆盖（也就是，非静态方法不能覆盖静态方法）
			什么时候使用覆盖操作？
			    close-open原则：尽量少修改原来的代码
				当对一个类进行子类的扩展时，子类需要保留父类的功能声明。
				但是要定义子类中该功能的特有内容时，就使用覆盖操作完成。
	 3，构造函数

==========================================================================================
==========================================================================================

Java09--抽象类和接口

*子父类中的构造函数的特点
 在子类构造对象时，发现访问子类构造函数时，父类也运行了。
 为什么呢？原因是：在子类的构造函数中第一行有一个默认的隐式语句，super();
 class Fu
 {
   Fu(){ System.out.println("fu run...."); }
 }
 class Zi extends Fu
 {
   Zi()
   {
     //super();//调用的就是父类中的空参数的构造函数
	 //通过super初始化父类内容时，子类的成员变量并未显示初始化，等super()父类初始化完毕后，
	 //才进行子类的成员变量显示初始化，忙完父类的事（初始化）再忙子类的事（初始化）
	 System.out.println("zi run....");
   }
 }
 class ExtendsDemo
 {
   public static void main(String[] args)
   {
     new Zi();//结果为 fu run....zi run....
   }
 }
 如果父类中没有空参数构造函数，如 Fu(int x){}
 则子类的构造函数中第一行必须得调用父类的构造函数，
 此时需要自己显示的写出来，super(4);
 构造函数不能够被覆盖。
 子类的实例化过程：
	 子类中所有的构造函数默认都会访问父类中的空参数的构造函数。
 为什么子类实例化的时候要访问父类中的构造函数呢？
     因为子类继承了父类，获取到了父类中内容（属性），所以在使用父类内容之前，
	 要先看父类是如何对自己的内容进行初始化的。所以子类在构造对象时，必须访问父类中的构造函数。
	 为了完成这个必须的动作，就在子类的构造函数中加入了super();语句

 如果父类中没有定义空参数构造函数时，那么子类的构造函数必须用super明确调用父类
 中的一个构造函数，同时子类构造函数中如果使用this调用了本类的构造函数时，那么super
 就没有了，因为super和this都只能定义第一行，所以只能有一个。但是可以保证的是，
 子类中肯定会有其他的构造函数访问父类的构造函数。
 Object，java中的上帝类，extends Object

 构造函数的默认权限和类的访问权限是一致的。

 注意：super语句必须要定义在子类构造函数的第一行，因为父类的初始化动作要先完成。
       子类初始化必须有父类的帮助。
 this和super
*一个对象实例化的过程：Person p = new Person();
 1，JVM会读取指定的路径下的Person.class文件，并加载进内存，
    并会加载Person的父类（如果有直接的父类的情况下）
 2，在堆内存中的开辟空间，分配地址。
 3，并在对象空间中，对对象中的属性进行默认初始化。
 4，调用对应的构造函数进行初始化
 5，在构造函数中，第一行会先到调用父类中构造函数进行初始化
 6，父类初始化完毕后，在对子类的属性进行显示初始化
 7，在进行子类构造函数的特定初始化
 8，初始化完毕后，将地址值赋值给引用变量。
*final关键字
 继承弊端：打破了封闭性
 1，final是一个修饰符，可以修饰类，方法，变量。
 2，final修饰的类不可以被继承。
 3，final修饰的方法不可以被覆盖。
 4，final修饰的变量是一个常量，只能赋值一次，在定义的时候显示初始化。
    为什么要用final修饰变量？
	其实在程序中如果一个数据时固定的，那么直接使用这个数据就可以了，但阅读性差，
	所以给这个数据起个名称，而且这个变量名称的值不能变化，所以加上final固定。
	写法规范：常量所有字母都大写，多个单词中间用_连接。
*抽象类：abstract
 抽象：笼统，模糊，看不懂，不具体
 特点：1，方法只有声明没有实现时，该方法就是抽象方法，需要被 abstract修饰
          抽象方法必须定义在抽象类中，该类必须也被 abstract修饰
       2，抽象类不可以被实例化。因为调用抽象方法没有意义。
	   3，抽象类必须有其子类覆盖了所有的抽象方法后，该子类才可以实例化，
	      否则，这个子类还是抽象类。

*抽象类细节
 1，抽象类有构造函数吗？
    有，用于给子类对象进行初始化。
 2，抽象类可以不定义抽象方法吗？
    可以不定义抽象方法。
	但很少见，目的就是不让该类创建对象，AWT的适配器就是这种类。通常这个类中的方法有方法体，但是没有内容
	也即是只有一个大括号{}
 3，抽象关键字不可以和哪些关键字共存？
   （非法的修饰符组合）
    private不行，因为私有方法没有办法被子类覆盖
	static不行，因为静态方法或变量可以直接用类名进行调用，而抽象方法没有方法体，调用没有意义
	final不行，final修饰的方法是不能够被覆盖的
 4，抽象类和一般类的比较（异同点）？
    相同点：抽象类和一般类都是用来描述事物的，都在内部定义了成员。
	不同点：1，一般类有足够的信息描述事物
	           抽象类描述事物的信息有可能不足。
			2，一般类中不能定义抽象方法，只能定义非抽象方法。
			   抽象类中可以定义抽象方法，同时也可以定义非抽象方法
			3，一般类可以被初始化
			   抽象类不可以被初始化
 5，抽象类一定是个父类吗？
    是的。因为需要子类覆盖其方法后才可以对子类实例化。

*接口，当一个抽象类中的方法都是抽象的时候，这时可以将该抽象类用另一种形式定义和表示，
       就是 接口 interface
	   定义接口使用的关键字不是 class，是interface
	   对于接口中常见的成员：1，全局常量 public static final（可以省略，但可读性不好）
							 2，抽象方法 public abstract（可以省略）
	   由此得出结论，接口中的成员都是公共的权限。
       类与类之间是继承关系，类与接口之间是实现关系。extends，implements
 格式：	interface Demo{}
        class DemoImpl implements Demo{}
 接口不可以实例化
 只能由是实现了接口的子类并覆盖了接口中所有的抽象方法后，该子类才可以实例化。
 否则，这个子类就是抽象类。
*接口--多实现
 在java中不直接支持多继承，因为会出现调用的不确定性。
 所以java将多继承机制进行改良，在java中变成了多实现。
 一个类可以实现多个接口。
 interface A
 {
   public void show();
 }
 interface B
 {
   public int show();
 }
 class Test implements A,B//多实现
 {
   public void show(){}
   public int show(){}//这种情况是不允许的
 }
 一个类在继承另一个类的同时，还可以实现多个接口
 class D extends C implements A,B{}
 接口的出现避免了单继承的局限性

 interface CC extends AA,BB{}
 接口与接口之间是继承关系，而且接口可以多继承
 接口的特点：
     接口是对外暴露的规则
	 接口是程序的功能扩展。
	 接口的出现降低耦合性。
	 接口可以用来多实现。
	 类与接口之间是实现关系，而且类可以继承一个类的同时实现多个接口。
	 接口与接口之间可以有继承关系。
*抽象类和接口的异同点
 相同点：都是不断向上抽取而来的
 不同点：1，抽象类需要被继承，而且只能单继承
            接口需要被实现，而且可以多实现
         2，抽象类中可以定义抽象方法和非抽象方法，子类继承后，可以直接使用非抽象方法。
			接口中只能定义抽象方法，必须由子类去实现。
		 3，抽象类的继承，是 is a 关系，在定义该体系的基本共性内容
		    接口的实现是 like a 关系，在定义体系额外功能
		 用抽象类来定义基本功能
		 用接口来定义额外功能

==========================================================================================
==========================================================================================

Java10--多态和内部类

*接口的应用
 /*
笔记本电脑使用。
为了扩展笔记本的功能，但日后出现什么功能设备不知道。

定义一个规则，只要日后出现的设备都符合这个规则就可以了。
规则在java中就是接口。
*/
	interface USB// 暴露的规则。
	{
		public void open();
		public void close();
	}
	class BookPC
	{
		public static void main(String[] args)
		{
			useUSB(new UPan());//功能扩展了。
			useUSB(new UsbMouse());
		}
		//使用规则。
		public static void useUSB(USB u)
		//接口类型的引用，用于接收(指向)接口的子类对象。//USB u= new UPan();
		{
			if(u!=null)
			{
				u.open();
				u.close();
			}
		}
	}
	//一年后。------------------------------
	//实现规则。
	//这些设备和电脑的耦合性降低了。
	class UPan implements USB
	{
		public void open()
		{
			System.out.println("upan open");
		}
		public void close()
		{
			System.out.println("upan close");
		}

	}
	class UsbMouse implements USB
	{
		public void open()
		{
			System.out.println("UsbMouse open");
		}
		public void close()
		{
			System.out.println("UsbMouse close");
		}
	}
	/*
	class Mouse
	{
	}
    //------------------------------
	class BookPC
	{
		public static void main(String[] args)
		{
			useMouse(new Mouse());
		}
		public static void useMOuse(Mouse m)
		{
			m.open();
		}
		public static void useMOuse(Mouse m)
		{
			m.open();
		}
	}
	*/
*多态，多种形态，某一类事物的多种存在形态。
 示例，狗这个对象对应的类型是狗类型 Dog d = new Dog();
 同时狗也是动物中的一种，也可以把狗称为动物，Animal a = new Dog();
 动物是猫和狗具体事物中抽取出来的父类型，父类型引用指向了子类对象。
 Dog d = new Dog();
 Animal a = new Dog();//一个对象，两种形态。
 狗这类事物既具备狗的形态，又具备着动物的形态，这就是对象的多态性。
 简单说：就是一个对象对应着不同类型。
 多态在代码中的体现：父类或者接口的引用指向子类的对象。
 多态的好处：提高了代码的扩展性，前期定义的代码可以使用后期的内容。
 多态的弊端：前期定义的内容不能使用（调用）后期子类特有的内容。
 多态的前提：1，必须有关系，继承或实现
			 2，要有覆盖。
 Animal	a = new Cat(); a.eat();
 //自动类型提升，猫对象提升了动物类型，但特有功能无法访问，作用就是限制对特有功能的访问
 //专业上讲：向上转型
 //如果还想使用具体动物猫的特有功能，则需要将该对象进行向下转型（强制类型转型）。
 Cat c = (cat) a;
 c.catchMouse();//向下转型的目的为了使用子类中的特有方法。
 byte b = 3; int x = b;
	 /*
	毕老师和毕姥爷的故事。
	*/
	class 毕姥爷
	{
		void 讲课()
		{
			System.out.println("管理");
		}
		void 钓鱼()
		{
			System.out.println("钓鱼");
		}
	}

	class 毕老师 extends 毕姥爷
	{
		void 讲课()
		{
			System.out.println("Java");
		}
		void 看电影()
		{
			System.out.println("看电影");
		}
	}
	class  DuoTaiDemo2
	{
		public static void main(String[] args)
		{
	//		毕老师 x = new 毕老师();
	//		x.讲课();
	//		x.看电影();

			毕姥爷 x = new 毕老师();
			x.讲课();
			x.钓鱼();

			毕老师 y = (毕老师)x;//ClassCastException
			y.看电影();
		}
	}

*ClassCastException
 注意：对于转型，自始至终都是子类对象在做着类型的变化。
 instanceof：用于判断对象的具体类型，只能用于引用数据类型判断
             通常在向下转型前用于健壮性的判断。
*多态时，成员的特点：
 1，成员变量
        覆盖只发生在函数，不对成员变量起作用
		编译时：参考引用型变量所属的类中是否有调用的成员变量，有编译通过，没有，编译失败。
		运行时：参考引用型变量所属的类中是否有调用的成员变量，并运行该所属类中的成员变量。
		简单说：编译和运行都参考等号的左边。
		了解即可，开发时一般不会出现。
		class Fu
		{
	     	int num = 3;
		}
		class Zi extends Fu
		{
			int num = 4;
		}
		class  DuoTaiDemo3
		{
			public static void main(String[] args)
			{
				Fu f = new Zi();
				System.out.println(f.num);//结果为 3
			}
		}

 2，成员函数（最重要）
        编译时：参考引用型变量所属的类中的是否有调用的函数。有，编译通过，没有，编译失败。
	    运行时：参考的是对象所属的类中是否有调用的函数。
	    简单说：编译看左边，运行看右边。
	    因为成员函数存在覆盖特性。
		class Fu
		{
			void show()
			{
				System.out.println("fu show");
			}
		}
		class Zi extends Fu
		{
			void show()
			{
				System.out.println("zi show");
			}
		}
		class  DuoTaiDemo3
		{
			public static void main(String[] args)
			{
				Fu f = new Zi();// f 指向 Zi类型对象的地址，子类没有该方法，则调用从父类继承的方法
		 		f.show();//编译时，看父类是否有show()方法，没有编译失败
				//运行时，若子类有该方法，则调用子类的方法，子类没有该方法，则调用父类的该方法
			}
		}

 3，静态函数
        编译时：参考引用型变量所属的类中的是否有调用的静态方法。
		运行时：参考引用型变量所属的类中的是否有调用的静态方法。
		简单说，编译和运行都看左边。
		其实对于静态方法，是不需要对象的。直接用类名调用即可。
		静态方法是随着类的加载而加载。
		class Fu
		{
			static void method()
			{
				System.out.println("fu static method");
			}
		}

		class Zi extends Fu
		{
			static void method()
			{
				System.out.println("zi static method");
			}
		}
		class  DuoTaiDemo3
		{
			public static void main(String[] args)
			{
			    Fu f = new Zi();
				f.method();//fu static method

				Fu.method();//fu static method
				Zi.method();//zi static method
			}
		}

*内部类，将一个类定义在另一个类的里面，对里面那个类就称为内部类，内置类，嵌套类
 内部类访问特点：
     内部类可以直接访问外部类中的成员，包括私有成员。
	 外部类要访问内部类中的成员必须要建立内部类的对象。
 一般用于类的设计：
 分析事物时，发现该事物描述中还有事物，而且这个事物还在访问被描述事物的内容。
 这时就是还有的事物定义成内部类来描述。
 内部类生成的 class 文件命名：Outer$Inner（类名$内部类名.class）
	class Outer
	{
		private static int num = 31;
		class Inner// 内部类。
		{
			void show()
			{
				System.out.println("show run..."+num);
			}
			/*static void function()//如果内部类中定义了静态成员，该内部类也必须是静态的。
			{
				System.out.println("function run ...."+num);
			}
			*/
		}
		public void method()
		{
			Inner in = new Inner();
			in.show();
		}
	}
	class InnerClassDemo
	{
		public static void main(String[] args)
		{
	//		Outer out = new Outer();
	//		out.method();
			//直接访问外部类中的内部类中的成员。
	//		Outer.Inner in = new Outer().new Inner();//很少使用，一般都会把内部类私有化private
	//		in.show();

			//如果内部类是静态的。 相当于一个外部类
	//		Outer.Inner in = new Outer.Inner();
	//		in.show();

			//如果内部类是静态的，成员是静态的。
	//		Outer.Inner.function();

		}
	}

	/*
	为什么内部类能直接访问外部类中成员呢？
	那是因为内部类持有了外部类的引用。  外部类名.this
	*/
	class Outer
	{
		int num = 3;
		class Inner
		{
			int num = 4;
			void show()
			{
				int num = 5;
				System.out.println(Outer.this.num);
			}
		}
		void method()
		{
			new Inner().show();
		}
	}
	class InnerClassDemo2
	{
		public static void main(String[] args)
		{
			new Outer().method();
		}
	}

 内部类可以存放在局部位置上。
 内部类在局部位置上只能访问局部中被final修饰的局部变量。
	class Outer
	{
		int num = 3;
		Object method()
		{
			final int x = 9;
			class Inner
			{
				public String toString()
				{
					return "show ..."+x;
					//内部类在函数中时候，只能访问最终类型（final）的变量（常量）
				}
			}
			Object in = new Inner();
			return in;//0x0045
        	//in.show();
		}
	}

	class InnerClassDemo3
	{
		public static void main(String[] args)
		{
			Outer out = new Outer();
			Object obj = out.method();
			System.out.println(obj);
		}
	}
*匿名内部类

		interface Inner
		{
			void show1();
			void show2();
		}

		class Outer
		{
			class InnerImpl implements Inner
			{		public void show1(){}
					public void show2(){}
			}

			public void method()
			{
		//		Inner in = new InnerIImpl();
		//		in.show1();
		//		in.show2();
				Inner in = new Inner()
				{
					public void show1(){}
					public void show2(){}
				};
				in.show1();
				in.show2();
			}
		}
		/*
		通常的使用场景之一：
		当函数参数是接口类型时，而且接口中的方法不超过三个。
		可以用匿名内部类作为实际参数进行传递
		*/
		class InnerClassDemo5
		{
			public static void main(String[] args)
			{
			    //①传递参数
				show(new Inner()//匿名内部类创建一个匿名对象
				{
					public void show1(){}//实现接口的抽象方法
					public void show2(){}
				});

				//②调用方法
				new Inner(){
					public void show1(){}//实现接口的抽象方法
					public void show2(){}
				}.show1();
			}
			public static void show(Inter in)
			{
				in.show1();
				in.show2();
			}
		}

		一个细节：
		class Outer
		{
			void method()
			{
			    Object obj = new Object()
				{
					public void show(){  System.out.println("show run"); }
				};
				obj.show();//因为匿名内部类这个子类对象被向上转型为了Object类型。
						   //这样就不能在使用子类特有的方法了。
						   //可以用匿名内部类创建的对象直接调用
			}
		}

		class InnerClassDemo6
		{
			public static void main(String[] args)
			{
				new Outer().method();
			}
		}
*对象初始化过程
 class Fu
 {
   Fu()
   {
     System.out.println("fu constructor run");
	 show();
   }
   void show()
   {
     System.out.println("fu show");
   }
 }

 class Zi extends Fu
 {
   int num = 9;
   {//构造代码块
     System.out.println("constructor code ..." + num);
	 num = 10;
   }
   Zi()//①
   {
     super();//②
	 //显示初始化④
	 //构造代码块初始化⑤
	 System.out.println("zi constructor ..." + num);//⑥
   }
   void show()//③
   {
     System.out.println("show ..." + num);
   }
 }
 //测试类
 class Test
 {
   new Zi();
 }
 //运行结果如下，进行分析：
   fu constructor run
   show...0
   constructor code...9
   zi constructor...10
 执行过程为①~⑥






