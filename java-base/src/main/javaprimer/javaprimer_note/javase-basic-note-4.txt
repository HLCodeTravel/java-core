javaSE总目录
目录（一）
Java01--概论和配置
Java02--运算符
Java03--位运算与三大语句
Java04--for语句和函数、数组
Java05--数组和查找算法
Java06--数组和面向对象
Java07--面向对象和关键字
Java08--面向对象继承和工具类、工厂模式
Java09--抽象类和接口
Java10--多态和内部类
目录（二）
Java11--异常和Object
目录（三）
Java12--包和多线程
Java13--多线程[空]
Java14--多线程[空]
**********************************************
目录（四）
Java15--String、StringBuffer和StingBuilder
Java16--j5和集合框架
Java17--集合
Java18--集合与泛型
Java19--集合与工具类
**********************************************
目录（五）
Java20--常用类和IO流
Java21--IO流
Java22--IO流
Java23--IO流
Java24--IO流
目录（六）
Java25--GUI[空]
Java26--网络上
Java27--网络下
Java28--反射和正则表达式




========================================================================================
========================================================================================

Java15--String

*String类的特点：
 字符串是一个特殊的对象。
 字符串对象一旦初始化就不可以被改变。
 String是不可变类。
*String对象的初始化
 String str = "string";
 String str1 = "string";
 str == str1;// true  字符串常量池，一个字符串对象在常量池中只出现一次。没有 就创建，有 引用。

 String s1 = "abc";
 String s2 = new String("abc");
 s1 == s2; // false 因为上面是在常量池中创建对象，下面在堆内存中创建对象，返回地址不相同
 s1.equals(s2);//true 因为String类覆写了Object的equals方法，来比较字符串内容。
*String类的构造函数
 String s = new String();//不等价于 String s = null;
 String s = "";//上面两行代码等价，一般会用第二种方式来创建对象，简单而且对象可以共享

 将数组变为字符串：
 字节数组可以根据ASCII码来转换为字符串，如
 byte[] bytes = {65,66,67,68};
 String s1 = new String(bytes);// "ABCD"，字节是最小的存储单位，所以很常用
 char[] chs = {'a','b','c'};
 String s2 = new String(chs);//"abc"
 String s3 = new String(chs,1,2);//"bc",起始下标和长度
*常用方法
 int length();// 数组中的length是属性，而字符串的是方法
 char charAt(int index)
 int indexOf(int ch);// 为什么参数类型为int ? 因为它可以传入 字符或者整数
 int indexOf(int ch, int fromIndex)
 int indexOf(String str); //可以根据返回值是否为 -1 来判断该字符或者字符串是否存在
 int indexOf(String str, int fromIndex);
 int lastIndexOf(....);
 String substring(int beginIndex, int endIndex);//包含起始索引，不包含结束索引
 String substring(int beginIndex); // 等价于 substring(int beginIndex, str.length())

*StringIndexOutOfBoundsException 字符串角标越界
*转换
 将字符串编程字符串数组（字符串的切割）
 String[] split(String regex)// 用正则表达式来切割
 示例： String s = "张三,李四,王五";
        String[] arr = s.split(",");
 将字符串变成字符数组
 char[] toCharArray();
 将字符串转换为字节数组
 byte[] getBytes();
 byte[] getBytes(...);
 将字符串中字符转换为大小写
 String toUpperCase();
 String toLowerCase();
 将字符串中内容进行替换（并没有变化，重新创建后赋值给该引用）
 String replace(char oldChar, char newChar);
 String replace(String oldStr, String newStr);
 将字符串两端的空格去除
 String trim();
 将两个字符串连接
 String concat(String str);//面向对象
 +// 字符串连接符
*静态方法
 String static valueOf(...);

*判断
 判断两个字符串内容是否相同？
     boolean equals(Object o)
	 boolean equalsIgnoreCase(String s);
	 boolean contains(CharSequence s) // 调用了 int indexOf(CharSequence s)返回值是否是-1
	 boolean endsWith(String suffix);
	 boolean startsWith(String prefix);

* CharSequence接口
     --CharBuffer
	 --Segment
	 --String
	 --StringBuffer
	 --StringBuilder

*String intern();//对字符串常量进行操作的
 String s1 = new String("abc");
 String s2 = s1.intern();
 s1 == s2;// false,查看api文档，把堆中的字符串对象加入到常量池中，并返回
*字符串排序
  public static void sortString(String[] arr) {
		for (int i = 0; i < arr.length - 1; i++) {
			for (int j = i + 1; j < arr.length; j++) {

				if(arr[i].compareTo(arr[j])>0)//字符串比较用compareTo方法
					swap(arr,i,j);
			}
		}
	}

   private static void swap(String[] arr, int i, int j) {
		String temp = arr[i];
		arr[i] = arr[j];
		arr[j] = temp;
	}

*子串出现的次数
 	private static int countSubstringTimes(String str,String substring)
	{
		int count = 0;
	    while(str.contains(substring))
		{
		  count++;
		  str = str.substring(str.indexOf(substring)+substring.length());
		}
		return count;
	}

	public static int getKeyStringCount(String str, String key) {
		//1,定义计数器。
		int count = 0;
		//2，定义变量记录key出现的位置。
		int index = 0;
		while((index = str.indexOf(key))!=-1){
			str = str.substring(index+key.length());
			count++;
		}
		return count;
	}
	//选择这种方式更优
	public static int getKeyStringCount_2(String str, String key) {
		int count = 0;
		int index = 0;
		while((index = str.indexOf(key,index))!=-1){
			index = index + key.length();
			count++;
		}
		return count;
	}
*求最大相同子串
 	public static String getMaxSubstring(String s1, String s2) {
		String max = null,min = null;
		max = (s1.length()>s2.length())?s1:s2;
		min = max.equals(s1)?s2:s1;
		for (int i = 0; i < min.length(); i++) {
			for(int a = 0,b = min.length()-i; b != min.length()+1; a++,b++){
				String sub = min.substring(a, b);
                //System.out.println(sub);
				if(max.contains(sub))
					return sub;
			}
		}
		return null;
	}
*模拟tirm方法
 	public static String myTrim(String s) {
		int start = 0, end = s.length() - 1;
		while (start <= end && s.charAt(start) == ' ') {
			start++;
		}
		while (start <= end && s.charAt(end) == ' ') {
			end--;
		}
		return s.substring(start, end + 1);
	}

*StringBuffer就是字符串缓冲区，用于存储数据的容器。
 特点：1，长度是可变的
       2，可以存储不同类型的数据
	   3，最终要转成字符串进行使用
	   4，可以对字符串进行修改
 创建缓冲区对象
 StringBuffer sb = new StringBuffer();//初始容量是 16 个字符，
 容器对象，应该具备什么功能呢？
 1，添加：
    StringBuffer append(....); // 尾部追加数据，很多个方法重载
		StringBuffer sb = new StringBuffer();
		StringBuffer s = sb.append(4);// 直接写为 sb.append(4);
		sb == s; // true，append之后返回的依然是容器
		sb.append(true);  // 4true
		sb.append(4).append(true);// 方法调用链，链式调用
    StringBuffer insert(int index, CharSequence s);
 2，删除：
    要么是delete,要么是remove
	StringBuffer delete(int start,int end);//包含头，不包含尾
	StringBuffer delete(int index)

	自我小结：
	  方法中若有两个参数，一般两个参数分别表示的是起始下标、结束下标，其中不包括结束下标
		    若有三个参数，一般三个参数分别表示的是数组、起始下标、长度

    sb.delete(0,sb.length());//清空缓冲区
 3，查找
    char charAt(int index);
	int indexOf(....);//多个方法重载
	int lastIndexOf(....);//多个方法重载
 4，修改
    StringBuffer replace(int start,int end,String s);
    void setCharAt(int index);//返回类型与其他不同
*void setLength(int length);
	 StringBuffer sb = new StringBuffer("abcd");
	 sb.setLength(10);
	 打印sb时，长度大于容器中字符所占的长度，则剩余部分是空字符
	 sb.setLength(0); // 清空缓冲区

 StringBuffer reverse();

*可变长度数组
 比如默认长度是 16 个字符，如果所添加的长度大于 16，则开辟一个新的长度为原来2倍的数组，
 把之前的 16 个字符复制给新的数组，然后在新数组中进行操作

*java.lang.StringBuilder （1.5才有，StringBuffer1.0就有）
 是为了解决StringBuffer在单线程中效率低的问题，提高缓冲区的效率
 也是一个可变的字符序列，和StringBuilder兼容同一个api，但不保证同步。
 也就是说StringBuilder是StringBuffer的单线程的等价类。
 jdk升级的原因：
    1，简化书写  2，提高效率  3，增加安全性

 区别： StringBuffer是线程同步的，线程安全，单线程中效率低。
        StringBuilder是线程不同步的，线程不安全，单线程中效率高。
		原因：有没有锁
 class StringBuffer
 {
    //public synchronized StringBuffer append(int x){}
	//public synchronized StringBuffer delete(int start ,int end){}
	Object lock;
	public StringBuffer append(int x)
	{
	   synchronized(lock)//同步代码块{}
	}
	public StringBuffer delete(int start ,int end)
	{
	   synchronized(lock)//同步代码块{}
	}
 }
 选用原则：单线程用StringBuilder，多线程用StringBuffer

*String和StringBuilder之间的转变
 StringBuilder sb = new StringBuilder(String s);
 String s = sb.toString();

========================================================================================
========================================================================================

Java16--j5和集合框架

*基本数据类型对象包装类（wrapper）
     把基本数据封装为对象，为其添加了属性和方法，来方便对其的操作
	 最常用的操作就是，基本数据类型和String类型之间的转换
 byte     Byte
 short    Short
 int 	  Integer
 long     Long
 float    Float
 double   Double
 char     Character
 boolean  Boolean
*Integer
 两个构造方法
     Integer(int value);
	 Integer(String s);

     Integer.MAX_VALUE
	 Integer.toBinaryString(int num);
	         toOctalString(int num);
			 toHexString(int num);
			 toString(int num, int radix);//转换为radix进制

        /*
		 * 整数具备不同的进制体现。
		 *
		 * 十进制-->其他进制。
		 * 		toBinaryString
		 * 		toOctalString
		 * 		toHexString
		 *
		 * 其他进制-->十进制。
		 * 		parseInt("string",radix)
		 *      int num = Integer.parseInt("3c",16);// 60
		 *      int num = Integer.parseInt("110",2);// 6
		 *
		 */

	 public static int parseInt(String s) throws NumberFormatException;
	 不用抛出该异常，而且不用捕获该异常，就可以运行，可见NumberFormatException是RuntimeException
	     * 该包装对象主要用基本类型和字符串之间的转换。
		 *
		 * 基本类型--->字符串
		 * 		1,基本类型数值+""
		 * 		2,用String类中的静态方法valueOf(基本类型数值);
		 * 		3,用Integer的静态方法valueOf(基本类型数值);
		 *
		 * 字符串--->基本类型
		 * 		1,使用包装类中的静态方法   xxx parseXxx("xxx类型的字符串");*****
		 * 			int parseInt("intstring");
		 * 			long parseLong("longstring");
		 * 			boolean parseBoolean("booleanstring");
		 * 			只有Character没有parse方法
		 * 		2,如果字符串被Integer进行对象的封装。
		 * 			可使用另一个非静态的方法，intValue();
		 * 			将一个Integer对象转成基本数据类型值。
	Integer a = new Integer(3);
    Integer b = new Integer("3");
    a == b; // false
    a.equals(b); //true,因为Integer覆写了Object的方法
    a.compareTo(b); //true
    int compareTo(Integer x);//返回 1,0或者-1
*自动拆箱、装箱
     Integer i =  4;//i = new Integer(4);自动装箱  简化书写。
     i = i + 6;// i = new Integer(i.intValue() + 6); //i.intValue() 自动拆箱
	 有一点弊端，当 Integer i = null;时，再进行 i = i + 6;就会有空指针异常

	 	Integer a = new Integer(128);
		Integer b = new Integer(128);
		System.out.println(a==b);//false
		System.out.println(a.equals(b));//true

		Integer x = 129;
		//jdk1.5以后，自动装箱，如果装箱的是一个字节，那么该数据会被共享不会重新开辟空间。
		//当赋值区间在 0~127内，x==y就是 true，享元模式
		Integer y = 129;
		System.out.println(x==y);//false
		System.out.println(x.equals(y));//true

import java.util.Arrays;

/*
 * 对一个字符串中的数值进行从小到大的排序。
 * "20 78 9 -7 88 36 29"
 */

public class WrapperTest {
	private static final String SPACE_SEPARATOR = " ";
	public static void main(String[] args) {
		String numStr = "20 78 9 -7 88 36 29";
		System.out.println(numStr);
		numStr = sortStringNumber(numStr);
		System.out.println(numStr);
	}

	public static String sortStringNumber(String numStr) {
		//1,将字符串变成字符串数组。
		String[] str_arr = stringToArray(numStr);

		//2,将字符串数组变成int数组。
		int[] num_arr = toIntArray(str_arr);

		//3,对int数组排序。
		mySortArray(num_arr);

		//4,将排序后的int数组变成字符串。
		String temp = arrayToString(num_arr);

		return temp;
	}

	public static String arrayToString(int[] num_arr) {
		StringBuilder sb = new StringBuilder();
		for(int x = 0; x<num_arr.length; x++){
			if(x!=num_arr.length-1)
				sb.append(num_arr[x]+SPACE_SEPARATOR);
			else
				sb.append(num_arr[x]);
		}

		return sb.toString();
	}

	public static void mySortArray(int[] num_arr) {
		Arrays.sort(num_arr);
	}

	public static int[] toIntArray(String[] str_arr) {
		int[] arr = new int[str_arr.length];
		for (int i = 0; i < arr.length; i++) {
			arr[i] = Integer.parseInt(str_arr[i]);
		}

		return arr;
	}

	//封装一下，可读性更强
	public static String[] stringToArray(String numStr) {
		String[] str_arr = numStr.split(SPACE_SEPARATOR);
		// 当出现多个空格是用+"+"正则表达式
		return str_arr;
	}
}

*集合
 集合类的由来：
     对象用于封装特有数据，对象多了需要存储，如果对象的个数不确定，就使用集合容器进行存储。
 集合的特点：（集合和数组的区别）
     1，用于存储对象的容器。
	 2，集合的长度是可变的。
	 3，集合不可以存储基本数据类型值。
 体系学习：看顶层，用底层。
 java.util，java工具包
 Collection（接口）
    |--List
	|--Set
	|--
*集合容器因为内部的数据结构不同，有多种具体容器。
 不断的向上抽取，就形成了集合框架。
 框架的顶层Collection接口：
	Collection的常见方法：
	1，添加。
		boolean add(Object obj):
		boolean addAll(Collection coll):

	2，删除。
		boolean remove(object obj);//会改变集合的长度的
		boolean removeAll(Collection coll);//删除交集，retainAll(Collection coll) 求交集
		void clear();//清空

	3，判断：
		boolean contains(object obj):
		boolean containsAll(Colllection coll);
		boolean isEmpty():判断集合中是否有元素。

	4，获取：
		int size()://返回值为0时，容器即为空的
		Iterator iterator():取出元素的方式：迭代器。
		取出集合中的元素，返回迭代器
		该对象必须依赖于具体容器，因为每一个容器的数据结构都不同。
		所以该迭代器对象是在容器中进行内部实现的。
		对于使用容器者而言，具体的实现不重要，只要通过容器获取到该实现的迭代器的对象即可，
		也就是iterator方法。

		Iterator接口就是对所有的Collection容器进行元素取出的公共接口。
		    boolean hasNext(); //判断
			E next();          //java.util.NoSuchElementException
			void remove();
			Iterator两种遍历方式：
			方式一：
				Iterator it = coll.iterator();
				while(it.hasNext())
				{
				  System.out.println(it.next);
				}
			方式二：（开发时使用此方式，节省一点内存，除非遍历完之后还用到迭代器）
				for(Iterator it = coll.iterator();it.hasNext();)
				{
				   System.out.println(it.next());
				}
            迭代器Itr是每一个集合的内部类，都实现了Iterator接口，在具体的集合的内部实现的，
			具体的迭代器是依赖具体集合类而实现的（存在）。
		    当一个类需要使用另外一个类的成员来描述，这个时候要定义为内部类。
	5，其他：
		boolean retainAll(Collection coll);取交集。与removeAll(Collection coll)正好相反
		Object[] toArray():将集合转成数组。

	-------------------------------
	Collection
		|--List：有序(存入和取出的顺序一致),元素都有索引(角标)，元素可以重复。
		|--Set：元素不能重复,无序。

	恰当的选择合适的集合至关重要。
	List:特有的常见方法：有一个共性特点就是都可以操作角标。

	1，添加
		void add(index,element);
		void add(index,collection);

	2，删除；
		Object remove(int index)://返回被删除的对象

	3，修改：
		Object set(index,element);

	4，获取：
		Object get(int index);
		int indexOf(object);
		int lastIndexOf(object);
		List subList(from,to);//包含头，不包含尾

	list集合是可以完成对元素的增删改查。
	List的第三种遍历方式：（List特有的遍历方式之一）
	    for(int i=0; i<list.size(); i++)
		{
		  System.out.println("get:"+list.get(i));
		}

		/*Iterator it = list.iterator();
		while(it.hasNext()){

			Object obj = it.next();//java.util.ConcurrentModificationException
						//在迭代器过程中，不要使用集合操作元素，容易出现异常。
						//可以使用Iterator接口的子接口ListIterator来完成在迭代中对元素进行更多的操作。
			if(obj.equals("abc2"))
				list.add("abc9");//此处添加的元素迭代器不知道
			else
				System.out.println("next:"+obj);
		}
		System.out.println(list);
		*/
		Iterator迭代器有局限性，但是其子接口ListIterator功能比较完善，
		通过 listIterator()来获取ListIterator迭代器对象，但只有list集合才有这个方法
		ListIterator listIterator();
		ListIterator listIterator(int index);

		ListIterator it = list.listIterator();//获取列表迭代器对象
		//它可以实现在迭代过程中完成对元素的增删改查。
		//注意：只有list集合具备该迭代功能.
		while(it.hasNext()){
			Object obj = it.next();
			if(obj.equals("abc2")){
				it.set("abc9");//list.add("abc100");
			}
		}
       //System.out.println("hasNext:"+it.hasNext());
       //System.out.println("hasPrevious:"+it.hasPrevious());

		while(it.hasPrevious()){
			System.out.println("previous:"+it.previous());
		}
		System.out.println("list:"+list);

	List:（容器的区分本质上是数据结构的不同决定的）
		|--Vector:内部是数组数据结构，是同步的。增删，查询都很慢！
		|--ArrayList:内部是数组数据结构，是不同步的。替代了Vector。查询的速度快。
		|--LinkedList:内部是链表数据结构，是不同步的。增删元素的速度很快。
        数组在同一块连续的内存空间，查询比较快。
        链表是在不连续的内存空间，查询速度比较慢。
		说明：当多线程时，我们依然不用Vector，基本上被淘汰掉了，
		      我们要么对ArrayList加锁，要么使用别的方式。

	作业：
	1，自己去查文档演示Vector中的elements()方法。
	2，LinkedList中的，addFirst addLast getFirst，getLast  removeFirst removeLast。
	3，既然集合是存储对象的，请定义ArryaList集合，并存储Person对象。如new Person("lisi",20);
	并取出。将姓名和年龄打印出来。

========================================================================================
========================================================================================

Java17--集合

*Vector集合（了解）
        Vector v = new Vector();
		v.addElement("abc1");
		v.addElement("abc2");
		v.addElement("abc3");
		v.addElement("abc4");

		Enumeration en = v.elements();
		while(en.hasMoreElements()){
			System.out.println("nextelment:"+en.nextElement());
		}
		//优先考虑该遍历方式
		Iterator it = v.iterator();
		while(it.hasNext()){
			System.out.println("next:"+it.next());
		}

*LinkedList集合
       void addFirst(E e);
	   void addLast(E e);
	   void add(int index, E element);

	   E getFirst();
	   E getLast();
	   E get(int index);

	   E removeFirst();// E remove();
	   E removeLast();

	   E remove(int index);
	   boolean remove(Object o); //如果存在则移除第一次出现的该元素

		addFirst();
		addLast():
		jdk1.6
		offerFirst();
		offetLast();


		getFirst();.//获取但不移除，如果链表为空，抛出NoSuchElementException.
		getLast();
		jdk1.6
		peekFirst();//获取但不移除，如果链表为空，返回null.
		peekLast():

		removeFirst();//获取并移除，如果链表为空，抛出NoSuchElementException.
		removeLast();
		jdk1.6
		pollFirst();//获取并移除，如果链表为空，返回null.
		pollLast();


    //请使用LinkedList来模拟一个堆栈或者队列数据结构。
	import java.util.LinkedList;
    public class DuiLie {
	private LinkedList link;
	public DuiLie() {
		link = new LinkedList();
	}
	/**
	 * 队列的添加元素的功能。
	 */
	public void myAdd(Object obj) {
		link.addLast(obj);
	}

	public Object myGet() {
		return link.removeFirst();
	}

	public boolean isNull() {
		return link.isEmpty();
	}
}

*ArrayList集合
      --使用较多，因为查询较多

----------------------------------------------------------------------

*Set:元素不可以重复，是无序。
	Set接口中的方法和Collection一致。
	|--HashSet: 内部数据结构是哈希表 ，是不同步的。
		如何保证该集合的元素唯一性呢？
		是通过对象的hashCode和equals方法来完成对象唯一性的。
		如果对象的hashCode值不同，那么不用判断equals方法，就直接存储到哈希表中。
		如果对象的hashCode值相同，那么要再次判断对象的equals方法是否为true。
		如果为true，视为相同元素，不存。如果为false，那么视为不同元素，就进行存储。

		记住：如果元素要存储到HashSet集合中，必须覆盖hashCode方法和equals方法。
		一般情况下，如果定义的类会产生很多对象，比如人，学生，书，通常都需要覆盖equals，hashCode方法。
		建立对象判断是否相同的依据。

		HashSet仅有一种遍历方式：
		Iterator it = hs.iterator();
		while(it.hasNext()){
			System.out.println(it.next());
		}

        public class Person extends Object{//可以参考ide工具生成的 hashCode和equals方法
				private String name;
				private int age;
				public Person() {
					super();
				}
				public Person(String name, int age) {
					super();
					this.name = name;
					this.age = age;
				}
				@Override
				public int hashCode() {
					//System.out.println(this+".......hashCode");
					return name.hashCode()+age*27;
					//return 100;
				}
				@Override
				public boolean equals(Object obj) {
					if(this == obj)
						return true;
					if(!(obj instanceof Person))
						throw new ClassCastException("类型错误");
					//System.out.println(this+"....equals....."+obj);
					Person p = (Person)obj;

					return this.name.equals(p.name) && this.age == p.age;
				}
				public String getName() {
					return name;
				}
				public void setName(String name) {
					this.name = name;
				}
				public int getAge() {
					return age;
				}
				public void setAge(int age) {
					this.age = age;
				}
				public String toString(){
					return name+":"+age;
				}
		}


*对于ArrayList集合去掉重复元素
     boolean contains(Object o);//该方法的比较依据是 boolean equals();

	 public static ArrayList getSingleElement(ArrayList al) {
		//1,定义一个临时容器。
		ArrayList temp = new ArrayList();
		//2,迭代al集合。
		Iterator it = al.iterator();
		while(it.hasNext()){
			Object obj = it.next();
			//3,判断被迭代到的元素是否在临时容器存在。
			if(!temp.contains(obj)){
				temp.add(obj);
			}
		}
		return temp;
	}


	System.out.println(al.remove(new Person("lisi",22)));//true
	//删除之前肯定要比较这个元素是否存在，boolean remove(Object o)比较的依据是 equals()

	数据结构不一样，则比较方式也不一样。

    |--HashSet
       |--LinkedHashSet
	      具有可预知迭代顺序的 Set 接口的哈希表和链接列表实现。
		  如果既要保证有序，又要保证元素不能重复，就使用 HashSet的子类LinkedHashSet即可。


	|--TreeSet:可以对Set集合中的元素进行排序。是不同步的。
				判断元素唯一性的方式：就是根据比较方法的返回结果是否是0，是0，就是相同元素，不存。

				TreeSet对元素进行排序的方式一：
				让元素自身具备比较功能，元就需要实现Comparable接口。覆盖compareTo方法。
					public interface Comparable<T>
					此接口强行对实现它的每个类的对象进行整体排序。
					这种排序被称为类的自然排序，类的 compareTo 方法被称为它的自然比较方法。



				如果不要按照对象中具备的自然顺序进行排序。如果对象中不具备自然顺序。怎么办？
				可以使用TreeSet集合第二种排序方式二：
				让集合自身具备比较功能，定义一个类实现Comparator接口，覆盖compare方法。
				将该类对象作为参数传递给TreeSet集合的构造函数。




	if(this.hashCode()== obj.hashCode() && this.equals(obj))
	TreeSet自然排序：
	public class Person implements Comparable<Person> {
			private String name;
			private int age;
			public Person() {
				super();
			}
			public Person(String name, int age) {
				super();
				this.name = name;
				this.age = age;
			}

			public String getName() {
				return name;
			}
			public void setName(String name) {
				this.name = name;
			}
			public int getAge() {
				return age;
			}
			public void setAge(int age) {
				this.age = age;
			}
			public String toString(){
				return name+":"+age;
			}
			@Override
			public int compareTo(Person p) {//参数为 Object o时不方便，这就是泛型的好处
				//Person p = (Person)o;
				int  temp = this.age-p.age;
				return temp==0?this.name.compareTo(p.name):temp;

				//int  temp = this.name.compareTo(p.name);
		        //return temp==0?this.age-p.age:temp;
				/*
				if(this.age>p.age)
					return 1;
				if(this.age<p.age)
					return -1;
				else{
					return this.name.compareTo(p.name);
				}
				*/
			}
		}

		TreeSet比较器
		import java.util.Comparator;
		import cn.itcast.p.bean.Person;
		/**
		 * 创建了一个根据Person类的name进行排序的比较器。
		 */
		public class ComparatorByName implements Comparator {//Comparator<Person>
			@Override
			public int compare(Object o1, Object o2) {//Person p1,Person p2
				Person p1 = (Person)o1;
				Person p2 = (Person)o2;
				int temp = p1.getName().compareTo(p2.getName());
				return temp==0?p1.getAge()-p2.getAge(): temp;
		        //return 1;//有序，存入的顺序
				//return -1;//有序，存入的逆序
			}
		}
		//给TreeSet容器传递一个比较器对象
        TreeSet ts = new TreeSet(new ComparatorByName());
	说明：当存入容器中的对象已经具备了自然排序，同时给容器传入了比较器对象，
	      则按比较器的规则来比较排序。
		  一般都会选用比较器作为排序规则。

	哈希表确定元素是否相同
	1，判断的是两个元素的哈希值是否相同。
		如果相同，在判断两个对象的内容是否相同。

	2，判断哈希值相同，其实判断的是对象的hashCode的方法。判断内容相同，用的是equals方法。

	注意：如果哈希值不同，是不需要判断equals。


========================================================================================
========================================================================================

Java18--集合与泛型

*泛型：
	jdk1.5出现的安全机制。

	好处：
		1，将运行时期的问题ClassCastException转到了编译时期。
		2，避免了强制转换的麻烦。

	<>:什么时候用？当操作的引用数据类型不确定的时候。就使用<>。将要操作的引用数据类型传入即可.
	   其实<>就是一个用于接收具体引用数据类型的参数范围。

	在程序中，只要用到了带有<>的类或者接口，就要明确传入的具体引用数据类型 。

	泛型技术是给编译器使用的技术,用于编译时期。确保了类型的安全。

	运行时，会将泛型去掉，生成的class文件中是不带泛型的,这个称为泛型的擦除。
	为什么擦除呢？因为为了兼容运行的类加载器。

	泛型的补偿：在运行时，通过获取元素的类型进行转换动作。不用使用者在强制转换了。

	泛型的通配符：? 未知类型。一般只用作泛型的限定

	泛型的限定：
	? extends E: 接收E类型或者E的子类型对象。上限
	一般存储对象的时候用。比如 添加元素 addAll.

	? super E: 接收E类型或者E的父类型对象。 下限。
	一般取出对象的时候用。比如比较器。

	泛型类：
	泛型方法：
	泛型接口：
	//在jdk1.5后，使用泛型来接收类中要操作的引用数据类型。
	//泛型类。什么时候用？当类中的操作的引用数据类型不确定的时候，就使用泛型来表示。
		public class Tool<QQ>{
			private QQ q;
			public QQ getObject() {
				return q;
			}
			public void setObject(QQ object) {
				this.q = object;
			}
			/**
			 * 将泛型定义在方法上。
			 * @param str
			 */
			public <W> void show(W str){
				System.out.println("show : "+str.toString());
			}
			public void print(QQ str){
				System.out.println("print : "+str);
			}
			/**
			 * 当方法静态时，不能访问类上定义的泛型。如果静态方法使用泛型，
			 * 只能将泛型定义在方法上。
			 * @param obj
			 */
			public static <Y> void method(Y obj){
				System.out.println("method:"+obj);
			}
		}

		//泛型接口，将泛型定义在接口上。
		interface Inter<T>{
			public void show(T t);
		}
		class InterImpl2<Q> implements Inter<Q>{
			public void show(Q q){
				System.out.println("show :"+q);
			}
		}
		class InterImpl implements Inter<String>{
			public void show(String str){
				System.out.println("show :"+str);
			}
		}

-----------------------------------------------------------------------------

*Map集合
 Map：一次添加一对元素。Collection 一次添加一个元素。
	  Map也称为双列集合，Collection集合称为单列集合。
	  其实map集合中存储的就是键值对。
	  map集合中必须保证键的唯一性。

	常用方法：
	1，添加。
		value put(key,value):返回前一个和key关联的值，如果没有返回null.

	2，删除。
		void  clear():清空map集合。
		value remove(key):根据指定的key翻出这个键值对。

	3，判断。
		boolean containsKey(key):
		boolean containsValue(value):
		boolean isEmpty();

	4，获取。
		value get(key):通过键获取值，如果没有该键返回null。
					   当然可以通过返回null，来判断是否包含指定键。
		int size(): 获取键值对的个数。

	Map常用的子类：
		|--Hashtable :内部结构是哈希表，是同步的。不允许null作为键，null作为值。
			|--Properties：用来存储键值对型的配置文件的信息，可以和IO技术相结合。
		|--HashMap : 内部结构是哈希表，不是同步的。允许null作为键，null作为值。
		    HashSet实现了Set接口，由哈希表支持，实际上是一个HashMap实例。
		|--TreeMap : 内部结构是二叉树，不是同步的。可以对Map集合中的键进行排序。

*对Map的遍历
   Map没有Itr（Iterator）迭代器，Collection的实现类才有迭代器。
        //取出map中的所有元素。
		//原理，通过keySet方法获取map中所有的键所在的Set集合，在通过Set的迭代器获取到每一个键，
		//在对每一个键通过map集合的get方法获取其对应的值即可。
		Set<Integer> keySet = map.keySet();
		Iterator<Integer> it = keySet.iterator();
		while(it.hasNext()){
			Integer key = it.next();
			String value = map.get(key);
			System.out.println(key+":"+value);
		}

	    /*
		 * 通过Map转成set就可以迭代。
		 * 找到了另一个方法。entrySet。
		 * 该方法将键和值的映射关系作为对象存储到了Set集合中，而这个映射关系的类型就是Map.Entry类型(结婚证)
		 */
		Set<Map.Entry<Integer, String>> entrySet = map.entrySet();
		Iterator<Map.Entry<Integer, String>> it = entrySet.iterator();
		while(it.hasNext()){
			Map.Entry<Integer, String> me = it.next();
			Integer key = me.getKey();
			String value = me.getValue();
			System.out.println(key+"::::"+value);
		}


		/*
			Outer.Inner.show();//在主方法中调用内部类的静态方法
				}
			}
			interface MyMap{
				public static interface MyEntry{//内部接口
					void get();
				}
			}
			class MyDemo implements MyMap.MyEntry{
				public void get(){}
			}
			class Outer{
				static class Inner{
					static void show(){}
				}
			}
		*/

		//只遍历键值对中的值value
		Collection<String> values = map.values();
		Iterator<String> it2 = values.iterator();
		while(it2.hasNext()){
			System.out.println(it2.next());
		}

*TreeMap集合
     比较原则和TreeSet是一样的。

		集合的一些技巧：
		需要唯一吗？
		需要：Set
			需要制定顺序：
					需要： TreeSet
					不需要：HashSet
					但是想要一个和存储一致的顺序(有序):LinkedHashSet
		不需要：List
			需要频繁增删吗？
				需要：LinkedList
				不需要：ArrayList

		如何记录每一个容器的结构和所属体系呢？
		看名字！
		List
			|--ArrayList
			|--LinkedList
		Set
			|--HashSet
			|--TreeSet
		后缀名就是该集合所属的体系。
		前缀名就是该集合的数据结构。
		看到array：就要想到数组，就要想到查询快，有角标.
		看到link：就要想到链表，就要想到增删快，就要想要 add get remove+frist last的方法
		看到hash:就要想到哈希表，就要想到唯一性，就要想到元素需要覆盖hashcode方法和equals方法。
		看到tree：就要想到二叉树，就要想要排序，就要想到两个接口Comparable，Comparator 。
		而且通常这些常用的集合容器都是不同步的。

========================================================================================
========================================================================================

Java19--集合和工具类

*Map集合
 LinkedHashMap集合：可以完成怎么样存进去，就怎么样取出来，保证存入的顺序。
        HashMap<Integer,String> hm = new LinkedHashMap<Integer,String>();
		hm.put(7, "zhouqi");
		hm.put(3, "zhangsan");
		hm.put(1, "qianyi");
		hm.put(5, "wangwu");
		Iterator<Map.Entry<Integer,String>> it = hm.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<Integer,String> me = it.next();

			Integer key = me.getKey();
			String value = me.getValue();

			System.out.println(key+":"+value);
		}

*Map集合练习
    //统计字符串中各个字母出现的次数
		public static String getCharCount(String str) {
		//将字符串变成字符数组
		char[] chs = str.toCharArray();
		//定义map集合表。
		Map<Character,Integer> map = new TreeMap<Character,Integer>();
		for (int i = 0; i < chs.length; i++) {

			if(!(chs[i]>='a' && chs[i]<='z' || chs[i]>='A' && chs[i]<='Z'))
                //if(!(Character.toLowerCase(chs[i])>='a' && Character.toLowerCase(chs[i])<='z'))
				continue;
			//将数组中的字母作为键去查map表。
			Integer value = map.get(chs[i]);
			int count = 1;

			//判断值是否为null.
			if(value!=null){
				count = value+1;// value++;
			}
            //count++;
			map.put(chs[i], count);
			/*
			if(value==null){
				map.put(chs[i], 1);
			}else{
				map.put(chs[i], value+1);
			}
			*/
		}
		return mapToString(map);
	}

	private static String mapToString(Map<Character, Integer> map) {
		StringBuilder sb = new StringBuilder();
		Iterator<Character> it = map.keySet().iterator();
		while(it.hasNext()){
			Character key = it.next();
			Integer value = map.get(key);
			sb.append(key+"("+value+")");
		}
		return sb.toString();
	}

 Map集合在有映射关系时，可以优先考虑。
 查表法，用数组或者是map集合，其中映射关系较多时用map更合适。
 map集合的value可以是集合，比如班级号为key，学生就可以存入到一个Set集合中作为value

 ---------------------------------------------------------------------------------------

*工具类
 Collections工具类
 void sort(list);
 void sort(list,comparator);
 void swap(list,i,j);
			public static void demo_1(){

				List<String> list = new ArrayList<String>();

				list.add("abcde");
				list.add("cba");
				list.add("aa");
				list.add("zzz");
				list.add("cba");
				list.add("nbaa");
				System.out.println(list);

				//对list集合进行指定顺序的排序。
				//Collections.sort(list);
				//mySort(list);
				//mySort(list,new ComparatorByLength());
				Collections.sort(list,new ComparatorByLength());
				System.out.println(list);
			}
			public static <T> void mySort(List<T> list,Comparator<? super T> comp){

				for (int i = 0; i < list.size()-1; i++) {

					for (int j = i+1; j < list.size(); j++) {

						if(comp.compare(list.get(i), list.get(j))>0){

							//T temp = list.get(i);
							//list.set(i, list.get(j));
							//list.set(j, temp);
							Collections.swap(list, i, j);
						}
					}
				}
			}


			public static <T extends Comparable<? super T>> void mySort(List<T> list){

				for (int i = 0; i < list.size()-1; i++) {

					for (int j = i+1; j < list.size(); j++) {

						if(list.get(i).compareTo(list.get(j))>0){

							//	T temp = list.get(i);
							//	list.set(i, list.get(j));
							//	list.set(j, temp);
							Collections.swap(list, i, j);
						}
					}
				}
			}

			//定义比较器
            import java.util.Comparator;
			public class ComparatorByLength implements Comparator<String> {
				@Override
				public int compare(String o1, String o2) {
					int temp = o1.length() - o2.length();
					return temp==0?o1.compareTo(o2): temp;
				}
			}
 static int binarySearch(list,element);
 static T max(Collection<T> coll);
 static T max(Collection<T> coll,Comparator comp);
 static T min(Collection<T> coll);
 static T min(Collection<T> coll,Comparator comp);

			public static void demo_2(){
				List<String> list = new ArrayList<String>();

				list.add("abcde");
				list.add("cba");
				list.add("aa");
				list.add("zzz");
				list.add("cba");
				list.add("nbaa");
				//	Collections.sort(list);
				System.out.println(list);

				//	int index = Collections.binarySearch(list, "cba");
				//	System.out.println("index="+index);

				//获取最大值。
				String max = Collections.max(list,new ComparatorByLength());
				System.out.println("max="+max);
			}

			public static void demo_3() {
				/*
				TreeSet<String> ts = new TreeSet<String>(new Comparator<String>(){
					@Override
					public int compare(String o1, String o2) {
						int temp = o2.compareTo(o1);
						return temp;
					}
				});
				*/
				//如果是自定义的比较器，对其顺序反转，则用reverseOrder()方法
				TreeSet<String> ts = new TreeSet<String>(Collections.reverseOrder(new ComparatorByLength()));
				//如果是自然排序，则用reverseOrder属性即可，如下：
				//TreeSet<String> ts = new TreeSet<String>(Collections.reverseOrder);
				//reverseOrder比较器也可以用于List集合排序
				ts.add("abc");
				ts.add("hahaha");
				ts.add("zzz");
				ts.add("aa");
				ts.add("cba");

				System.out.println(ts);

			}



			public static void demo_4() {
				List<String> list = new ArrayList<String>();

				list.add("abcde");
				list.add("cba");
				list.add("zhangsan");
				list.add("zhaoliu");
				list.add("xiaoqiang");

				System.out.println(list);
				//Collections.replaceAll(list, "cba", "nba"); // set(indexOf("cba"),"nba");
				Collections.shuffle(list);
				//Collections.fill(list, "cc");
				System.out.println(list);
			}
*非同步集合转变成同步集合的方法
	给非同步的集合加锁。

	List list = new ArrayList();//非同步的。

	list = MyCollections.synList(list);//返回一个同步的list.

	class MyCollections{
			public static  List synList(List list){
				return new MyList(list);
			}

			private class MyList implements List{
			private List list;

			private static final Object lock = new Object();
			MyList(List list){
				this.list = list;
			}

			public boolean add(Object obj){
				synchronized(lock)
				{
					return list.add(obj);
				}
			}

			public boolean remove(Object obj){
				synchronized(lock)
				{
					return list.remove(obj);
				}
			}
		}
	}

	Collections.synchronizedXxxxx();//返回对应线程同步的集合。

*Arrays工具类
	 boolean equals([],[]);//比较两个数组是否相同
	 fill(....)

	//toString的经典实现。
	public static String myToString(int[] a){
		int iMax = a.length - 1;
		if (iMax == -1)
				return "[]";

		StringBuilder b = new StringBuilder();
		b.append('[');
		for (int i = 0;  ; i++) {//中间省略条件判断，提高了效率。
			b.append(a[i]);
		if (i == iMax)
			return b.append(']').toString();
		   b.append(", ");
		}
	}

	public static void demo_1() {
		/*
		 * 重点：List asList(数组)将数组转成集合。
		 * 好处：其实可以使用集合的方法操作数组中的元素。
		 * 注意：数组的长度是固定的，所以对于集合的增删方法是不可以使用的
		 * 否则会发生UnsupportedOperationException
		 */
		String[] arr = {"abc","haha","xixi"};

		boolean b = myContains(arr, "xixi");
		System.out.println("contains:"+b);

		List<String> list = Arrays.asList(arr);
		boolean b1 = list.contains("xixi");
		System.out.println("list contaisn:="+b1);
		//list.add("hiahia");//UnsupportedOperationException

		System.out.println(list);
	}

    public static void demo_2() {

		/*
		 * 如果数组中的元素是对象，那么转成集合时，直接将数组中的元素作为集合中的元素进行集合存储。
		 *
		 * 如果数组中的元素是基本类型数值，那么会将该数组作为集合中的元素进行存储。
		 */
		int[] arr = {31,11,51,61};

		List<int[]> list = Arrays.asList(arr);

		System.out.println(list);
    }


		/*
		 * 集合转成数组呢？
		 * 使用的就是Collection接口中的toArray方法。
		 * 集合转成数组：可以对集合中的元素操作的方法进行限定。不允许对其进行增删。
		 */

		List<String> list = new ArrayList<String>();
		list.add("abc1");
		list.add("abc2");
		list.add("abc3");

		/*
		 * toArray方法需要传入一个指定类型的数组。
		 * 长度该如何定义呢？
		 * 如果长度小于集合的size，那么该方法会创建一个同类型并和集合相同size的数组。
		 * 如果长度大于集合的size，那么该方法就会使用指定的数组，存储集合中的元素，其他位置默认为null。
		 *
		 * 所以建议，最后长度就指定为，集合的size。
		 */
		String[] arr = list.toArray(new String[list.size()]);

		System.out.println(Arrays.toString(arr));
	}

*JDK5.0新特性
		public static void main(String[] args) {

			/*
			 * foreach语句：
			 * 格式：
			 * for(类型  变量   ：Collection集合|数组){}
			 * 传统for和高级for的区别？
			 * 传统for可以完成对语句执行很多次，因为可以定义控制循环的增量和条件。
			 *
			 * 高级for是一种简化形式。
			 * 它必须有被遍历的目标。该目标要是数组，要么是Collection单列集合。
			 *
			 * 对数数组的遍历如果仅仅是获取数组中的元素，可以使用高级for。
			 * 如果要对数组的角标进行操作建议使用传统for。
			 *
			 */

			List<String> list =new ArrayList<String>();

			list.add("abc1");
			list.add("abc2");
			list.add("abc3");

			for(String s : list){	//简化书写。
				System.out.println(s);
			}

			int[] arr = {3,1,5,7,4};

			for(int i : arr){
				System.out.println(i);
			}

			//可以使用高级for遍历map集合吗？不能直接用，但是可以将map转成单列的set，就可以用了。
			Map<Integer,String> map = new HashMap<Integer,String>();

			map.put(3,"zhagsan");
			map.put(1,"wangyi");
			map.put(7,"wagnwu");
			map.put(4,"zhagsansan");


			for(Integer key : map.keySet()){
				String value = map.get(key);
				System.out.println(key+"::"+value);
			}

			for(Map.Entry<Integer,String> me : map.entrySet()){
				Integer key = me.getKey();
				String value = me.getValue();

				System.out.println(key+":"+value);
			}


			Iterator<String> it = list.iterator();
			while(it.hasNext()){
				System.out.println(it.next());
			}
	}


------------------------------------------------------------------------------

    /*
	 * 函数的可变参数。
	 * 其实就是一个数组，但是接收的是数组的元素。
	 * 自动将这些元素封装成数组。简化了调用者的书写。
	 * 注意：可变参数类型，必须定义在参数列表的结尾。
	 */
	public static int newAdd(int a,int...  arr){

		int sum = 0;
		for (int i = 0; i < arr.length; i++) {
			sum+=arr[i];
		}
		return sum;

		//System.out.println(arr);
		//return 0;
	}

	public static int add(int[] arr){
		int sum = 0;
		for (int i = 0; i < arr.length; i++) {
			sum+=arr[i];
		}
		return sum;
	}
----------------------------------------------------------------------------------------
	import static java.util.Collections.*;//静态导入，其实到入的是类中的静态成员。
	import static java.util.Collections.max;//静态导入，其实到入的是类中的静态成员。
	import static java.util.Collections.sort;//静态导入，其实到入的是类中的静态成员。
	import static java.lang.System.*;
 
 
========================================================================================
========================================================================================
	
