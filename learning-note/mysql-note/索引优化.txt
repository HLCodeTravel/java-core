MySQL查询优化值索引优化（王邱杰 成都）

目录
    - 引言
    - MySQL索引原理
    - 慢SQL优化实例
    - 结语


引言
    SELECT
        count(*)
    FROM
       amount_info
    WHERE
      name = 'join'
      and operator_id = 14567
      and operate_time > 1372269729
      and operate_time < 1371174603
      and type = 2;

    问题：
        报警超时
    原因：
        没有建立索引
    引出：
        该如何创建索引？
        索引的顺序如何？

-----------------------------------------------------
MySQL索引原理
    MySQL索引原理-索引的目的
        创建索引的最主要的目的就是提高查询效率。

        在字典中查询mysql这个单词的步骤：
            1. 定位到字母 m
            2. 从上往下找到 y
            3. 依次找到 s, q, l

        没有索引
            顺序查询，效率低

        通过不断地缩小想要获得数据的范围来筛选出最终想要的结果，并且可以用同一种查询方式来锁定数据。


    MySQL索引原理-索引的原理-磁盘IO
        访问一次磁盘的时间（大约14ms）
            寻道时间：是磁臂移动到指定磁道所需要的时间，主流磁盘一般在 5ms 以下
            旋转延迟：磁盘转速，60/7200 = 8.34ms
            传输时间：从磁盘读出或将数据写入磁盘的时间，一般在零点几毫秒


    MySQL索引原理-索引的原理-磁盘预读
        计算机操作系统做了一些优化，当一次IO时，不光把当前磁盘地址的数据，而是把相邻的数据也都读取到
            内存缓冲区内，每一次IO读取的数据我们称之为一页(page)，一般为4k或8k。


    MySQL索引原理-索引的数据结构-B+树
        B+树是怎么存储数据的呢？
            （B+树图）


    MySQL索引原理-索引的数据结构-B+树的性质
        IO次数取决于B+树的高度h；
        h = N * log(m+1)，当数据量N一定的情况下，m越小（数据项越大），h越小。
            m = 磁盘块的大小 / 数据项的大小
                磁盘块的大小一般为4k或8k
                数据项的个数取决于B+数每个节点包含的数据个数（4k/数据）
        数据项即索引越小一个数据页加载的索引数量就越多。

        思考：
            B+树要求把真实的数据放到叶子节点而不是内层节点？
                真正的数据往往比索引要大很多，
                如果把数据放到内层节点，那么内层节点可以创建的数据项大小就变小，则B+树的高度变高，查询时间变长

        最左匹配原则：
            复合索引
                (name, age, gender)
                索引生效的情况
                    (name)  -- 能够确定搜索方向
                    (name, age)
                    (name, age, gender)
                    (name, gender)  -- age和gender没有生效


    MySQL索引原理-建索引的原则
        最左前缀匹配原则，直到遇到范围比较（大于小于, like, between），比如 a = 1 and b = 2 and c > 3 and d = 4。
        = 和 in 可以乱序。比如 a = 1 and b = 2 and c = 3 建立 (a, b, c)索引可以任意顺序。
        尽量选择区分度高的列作为索引，区分度的公式是 count(distinct col) / count(*)。
        索引列不能参与计算，保持列“干净”。
        尽量的扩展索引，不要新建索引。
        尽量设置索引的类型为 long。


## 慢SQL优化实例
    MySQL索引原理-慢查询优化-建索引实例
            SELECT
                count(*)
            FROM
               amount_info
            WHERE
              name = 'join'
              and operator_id = 14567
              and operate_time > 1372269729
              and operate_time < 1371174603
              and type = 2;
            (name, type, operator_id)

            select count(*) from account_info where name = "jack";
            (name)

            select * from account_info where name = "paul" and type = 12 limit 10;
            (name, type)

            ==>
            索引(name, type, operator_id, operate_time)


    MySQL索引原理-慢查询优化-优化步骤
        0. 先运行看看是否真的很慢，注意设置SQL_NO_CACHE
        1. where 条件单表查，锁定最小返回记录表（根据区分度建立索引）。
        2. explain查看执行计划，是否与1预期一致。
        3. order by limit 形式的sql语句让排序的表优化先查
        4. 了解业务方使用场景
        5. 加索引时参照建索引的几大原则
        6. 观察结果，不符合预期继续从 0 分析。


结语
    任何数据库层面的优化都抵不上应用系统的优化。
    遇到慢SQL不要急，按照步骤一步一步分析。
    参照建立索引原则建立索引。
    不要幻想所有的慢SQL都能优化。




